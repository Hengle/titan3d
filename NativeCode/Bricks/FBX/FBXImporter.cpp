#include "FBXImporter.h"
#include "FbxDataConverter.h"
#include "fbxsdk/core/fbxsystemunit.h"
#include "FBXMeshImporter.h"
#include "../../Base/CoreSDK.h"

using namespace EngineNS;
#define  new VNEW

namespace AssetImportAndExport::FBX
{
	SystemUnit GetSystemUnitType(const FbxSystemUnit& unit)
	{
		if (unit == FbxSystemUnit::mm)
			return SystemUnit::SU_mm;
		if (unit == FbxSystemUnit::dm)
			return SystemUnit::SU_dm;
		if (unit == FbxSystemUnit::cm)
			return SystemUnit::SU_cm;
		if (unit == FbxSystemUnit::m)
			return SystemUnit::SU_m;
		if (unit == FbxSystemUnit::km)
			return SystemUnit::SU_km;
		if (unit == FbxSystemUnit::Inch)
			return SystemUnit::SU_Inch;
		if (unit == FbxSystemUnit::Foot)
			return SystemUnit::SU_Foot;
		if (unit == FbxSystemUnit::Mile)
			return SystemUnit::SU_Mile;
		if (unit == FbxSystemUnit::Yard)
			return SystemUnit::SU_Yard;
		return SystemUnit::SU_Custom;
	}

	FBXImporter::FBXImporter()
	{

	}

	FBXImporter::FBXImporter(FbxManager* fBXSdkManager)
	{
		mFBXSdkManager = fBXSdkManager;
	}

	FBXImporter::~FBXImporter()
	{
		mFBXSdkManager = nullptr;
		Safe_Delete<FBXFileImportDesc>(mFBXFileImportDesc);
	}

	bool FBXImporter::CheckFileValidedAndInitialize(const char* filename)
	{
		mFilename = std::string(filename);
		int lFileMajor, lFileMinor, lFileRevision;
		int lSDKMajor, lSDKMinor, lSDKRevision;
		//int i, lAnimStackCount;
		bool lStatus;
		//char lPassword[1024];

		// Get the version number of the FBX files generated by the
		// version of FBX SDK that you are using.
		FbxManager::GetFileFormatVersion(lSDKMajor, lSDKMinor, lSDKRevision);

		auto fbxFileName = FbxDataConverter::ConvertToFbxString(filename);
		// Create an importer.
		auto importer = FbxImporter::Create(mFBXSdkManager, fbxFileName);

		// Initialize the importer by providing a filename.
		const bool lImportStatus = importer->Initialize(fbxFileName, -1, mFBXSdkManager->GetIOSettings());

		// Get the version number of the FBX file format.
		importer->GetFileVersion(lFileMajor, lFileMinor, lFileRevision);

		if (!lImportStatus)  // Problem with the file to be imported
		{
			FbxString error = importer->GetStatus().GetErrorString();
			VFX_LTRACE(ELTT_Error, "Call to FbxImporter::Initialize() failed.");
			VFX_LTRACE(ELTT_Error, "Error returned: %s", error.Buffer());

			if (importer->GetStatus().GetCode() == FbxStatus::eInvalidFileVersion)
			{
				VFX_LTRACE(ELTT_Error, "FBX version number for this FBX SDK is %d.%d.%d",
					lSDKMajor, lSDKMinor, lSDKRevision);
				VFX_LTRACE(ELTT_Error, "FBX version number for file %s is %d.%d.%d",
					filename, lFileMajor, lFileMinor, lFileRevision);
			}
			return false;
		}

		//VFX_LTRACE(ELTT_Error, "FBX version number for this FBX SDK is %d.%d.%d",
		//	lSDKMajor, lSDKMinor, lSDKRevision);
		//VFX_LTRACE(ELTT_Error, "FBX version number for file %s is %d.%d.%d",
		//	filename, lFileMajor, lFileMinor, lFileRevision);

		if (importer->IsFBX())
		{

			// Import options determine what kind of data is to be imported.
			// The default is true, but here we set the options explictly.

			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_MATERIAL, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_TEXTURE, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_LINK, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_SHAPE, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_GOBO, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_ANIMATION, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_GLOBAL_SETTINGS, true);
		}

		auto scene = FbxScene::Create(mFBXSdkManager, fbxFileName);
		// Import the scene.
		lStatus = importer->Import(scene);

		// The import file may have a password
		if (lStatus == false &&
			importer->GetStatus().GetCode() == FbxStatus::ePasswordError)
		{
			VFX_LTRACE(ELTT_info, "Please enter password: ");
			return false;
		}

		// Convert mesh, NURBS and patch into triangle mesh
		FbxGeometryConverter lGeomConverter(mFBXSdkManager);
		lGeomConverter.Triangulate(scene, /*replace*/true);

		ExtractFBXFileDesc(scene, importer);

		ExtractFBXOBjectDescs(scene);

		importer->Destroy();

		CheckValided = true;
		return true;
	}

	const FBXFileImportDesc* FBXImporter::GetFileImportDesc() const
	{
		if (CheckValided)
		{
			return mFBXFileImportDesc;
		}
		return nullptr;
	}

	const FBXMeshImportDesc* FBXImporter::GetFBXMeshDescs(UINT index) const
	{
		if (CheckValided)
		{
			return mFBXFileImportDesc->Meshes[index];
		}
		return nullptr;
	}

	void FBXImporter::ExtractFBXFileDesc(fbxsdk::FbxScene* scene, fbxsdk::FbxImporter* importer)
	{
		mFBXFileImportDesc = new FBXFileImportDesc();
		auto info = importer->GetFileHeaderInfo();
		auto time = info->mCreationTimeStamp;
		char* charName = new char[strlen(info->mCreator.Buffer()) + 1];
		strcpy_s(charName, strlen(info->mCreator.Buffer()) + 1, info->mCreator.Buffer());
		mFBXFileImportDesc->Creater = charName;
		FbxSystemUnit SceneSystemUnit = scene->GetGlobalSettings().GetSystemUnit();
		mFBXFileImportDesc->FileSystemUnit = GetSystemUnitType(SceneSystemUnit);
		mFBXFileImportDesc->ScaleFactor = (float)FbxSystemUnit::m.GetConversionFactorFrom(SceneSystemUnit);
		//mFBXFileImportDesc.FBXScene = mScene;
		auto indexStart = mFilename.find_last_of('\\');
		auto indexEnd = mFilename.find_last_of('.');
		auto pureFileName = mFilename.substr(indexStart + 1, indexEnd - indexStart - 1);
		charName = new char[pureFileName.size() + 1];
		strcpy_s(charName, pureFileName.size() + 1, pureFileName.c_str());
		mFBXFileImportDesc->FileName = charName;
	}

	void FBXImporter::ExtractFBXOBjectDescs(fbxsdk::FbxScene* scene)
	{
		auto root = scene->GetRootNode();

		//mesh
		std::vector<FBXMeshImportDesc*> meshDescs;
		for (int i = 0; i < root->GetChildCount(); ++i)
		{
			ExtractFBXMeshesDescRecursive(root->GetChild(i), meshDescs);
		}
		if (meshDescs.size() > 0)
		{
			mFBXFileImportDesc->MeshNum = (UINT)meshDescs.size();
			mFBXFileImportDesc->Meshes = new FBXMeshImportDesc * [mFBXFileImportDesc->MeshNum];
			for (int i = 0; i < meshDescs.size(); ++i)
			{
				mFBXFileImportDesc->Meshes[i] = meshDescs[i];
			}

		}
		meshDescs.clear();
		//animation



	}

	void FBXImporter::ExtractFBXMeshesDescRecursive(fbxsdk::FbxNode* node, std::vector<FBXMeshImportDesc*>& outFBXMeshImportDesces)
	{
		auto att = node->GetNodeAttribute();
		if (att != nullptr)
		{
			auto attType = att->GetAttributeType();
			if (attType == FOT_Mesh)
			{
				auto mesh = (FbxMesh*)att;
				FBXMeshImportDesc* meshDesc = new FBXMeshImportDesc();
				auto strName = FbxDataConverter::ConvertToStdString(node->GetName());
				auto charName = new char[strName.size() + 1];
				strcpy_s(charName, strName.size() + 1, strName.c_str());
				meshDesc->Name = charName;
				//meshDesc->Hash = HashHelper::APHash(meshDesc->Name);
				meshDesc->Type = (EFBXObjectType)attType;
				meshDesc->FBXNode = node;
				if (mesh->GetDeformerCount() > 0)
				{
					meshDesc->HaveSkin = TRUE;
				}
				if (node->GetMaterialCount() > 0)
					meshDesc->RenderAtom = node->GetMaterialCount();
				else
					meshDesc->RenderAtom = 1;
				outFBXMeshImportDesces.push_back(meshDesc);
			}
		}
		for (int i = 0; i < node->GetChildCount(); ++i)
		{
			ExtractFBXMeshesDescRecursive(node->GetChild(i), outFBXMeshImportDesces);
		}
	}

	FBXMeshImporter* FBXImporter::CreateMeshImporter(UINT meshIndex)
	{
		return new FBXMeshImporter(this, meshIndex);
	}

}
