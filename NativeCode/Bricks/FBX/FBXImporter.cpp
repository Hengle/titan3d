#include "FBXImporter.h"
#include "FBXDataConverter.h"
#include "fbxsdk/core/fbxsystemunit.h"
#include "FBXMeshImporter.h"
#include "../../Base/CoreSDK.h"
#include <string>
#include "FBXAnimImporter.h"
#include "FBXUtils.h"

using namespace EngineNS;
#define  new VNEW

namespace AssetImportAndExport::FBX
{
	SystemUnit GetSystemUnitType(const FbxSystemUnit& unit)
	{
		if (unit == FbxSystemUnit::mm)
			return SystemUnit::SU_mm;
		if (unit == FbxSystemUnit::dm)
			return SystemUnit::SU_dm;
		if (unit == FbxSystemUnit::cm)
			return SystemUnit::SU_cm;
		if (unit == FbxSystemUnit::m)
			return SystemUnit::SU_m;
		if (unit == FbxSystemUnit::km)
			return SystemUnit::SU_km;
		if (unit == FbxSystemUnit::Inch)
			return SystemUnit::SU_Inch;
		if (unit == FbxSystemUnit::Foot)
			return SystemUnit::SU_Foot;
		if (unit == FbxSystemUnit::Mile)
			return SystemUnit::SU_Mile;
		if (unit == FbxSystemUnit::Yard)
			return SystemUnit::SU_Yard;
		return SystemUnit::SU_Custom;
	}

	FBXImporter::FBXImporter()
	{

	}

	FBXImporter::FBXImporter(FbxManager* fBXSdkManager)
	{
		mFBXSdkManager = fBXSdkManager;
	}

	FBXImporter::~FBXImporter()
	{
		mFBXSdkManager = nullptr;
		Safe_Delete<FBXFileImportDesc>(mFBXFileImportDesc);
	}

	bool FBXImporter::CheckFileValidedAndInitialize(const char* filename)
	{
		mFilename = std::string(filename);
		int lFileMajor, lFileMinor, lFileRevision;
		int lSDKMajor, lSDKMinor, lSDKRevision;
		//int i, lAnimStackCount;
		bool lStatus;
		//char lPassword[1024];

		// Get the version number of the FBX files generated by the
		// version of FBX SDK that you are using.
		FbxManager::GetFileFormatVersion(lSDKMajor, lSDKMinor, lSDKRevision);

		auto fbxFileName = FBXDataConverter::ConvertToFbxString(filename);
		// Create an importer.
		auto importer = FbxImporter::Create(mFBXSdkManager, fbxFileName);

		// Initialize the importer by providing a filename.
		const bool lImportStatus = importer->Initialize(fbxFileName, -1, mFBXSdkManager->GetIOSettings());

		// Get the version number of the FBX file format.
		importer->GetFileVersion(lFileMajor, lFileMinor, lFileRevision);

		if (!lImportStatus)  // Problem with the file to be imported
		{
			FbxString error = importer->GetStatus().GetErrorString();
			VFX_LTRACE(ELTT_Error, "Call to FbxImporter::Initialize() failed.");
			VFX_LTRACE(ELTT_Error, "Error returned: %s", error.Buffer());

			if (importer->GetStatus().GetCode() == FbxStatus::eInvalidFileVersion)
			{
				VFX_LTRACE(ELTT_Error, "FBX version number for this FBX SDK is %d.%d.%d",
					lSDKMajor, lSDKMinor, lSDKRevision);
				VFX_LTRACE(ELTT_Error, "FBX version number for file %s is %d.%d.%d",
					filename, lFileMajor, lFileMinor, lFileRevision);
			}
			return false;
		}

		//VFX_LTRACE(ELTT_Error, "FBX version number for this FBX SDK is %d.%d.%d",
		//	lSDKMajor, lSDKMinor, lSDKRevision);
		//VFX_LTRACE(ELTT_Error, "FBX version number for file %s is %d.%d.%d",
		//	filename, lFileMajor, lFileMinor, lFileRevision);

		if (importer->IsFBX())
		{

			// Import options determine what kind of data is to be imported.
			// The default is true, but here we set the options explictly.

			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_MATERIAL, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_TEXTURE, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_LINK, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_SHAPE, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_GOBO, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_ANIMATION, true);
			mFBXSdkManager->GetIOSettings()->SetBoolProp(IMP_FBX_GLOBAL_SETTINGS, true);
		}

		auto scene = FbxScene::Create(mFBXSdkManager, fbxFileName);
		// Import the scene.
		lStatus = importer->Import(scene);

		// The import file may have a password
		if (lStatus == false &&
			importer->GetStatus().GetCode() == FbxStatus::ePasswordError)
		{
			VFX_LTRACE(ELTT_info, "Please enter password: ");
			return false;
		}

		// Convert mesh, NURBS and patch into triangle mesh
		FbxGeometryConverter lGeomConverter(mFBXSdkManager);
		lGeomConverter.Triangulate(scene, /*replace*/true);

		ExtractFBXFileDesc(scene, importer);

		ExtractFBXOBjectDescs(scene);

		importer->Destroy();

		CheckValided = true;
		return true;
	}

	const FBXFileImportDesc* FBXImporter::GetFileImportDesc() const
	{
		if (CheckValided)
		{
			return mFBXFileImportDesc;
		}
		return nullptr;
	}

	const FBXMeshImportDesc* FBXImporter::GetFBXMeshDescs(UINT index) const
	{
		if (CheckValided && mFBXFileImportDesc->MeshNum > index)
		{
			return &mFBXFileImportDesc->Meshes[index];
		}
		return nullptr;
	}

	FBXMeshImporter* FBXImporter::CreateMeshImporter(UINT meshIndex)
	{
		return new FBXMeshImporter(this, meshIndex);
	}

	const FBXAnimImportDesc* FBXImporter::GetFBXAnimDesc(UINT index) const
	{
		if (CheckValided && mFBXFileImportDesc->AnimNum> index)
		{
			return &mFBXFileImportDesc->Anims[index];
		}
		return nullptr;
	}

	FBXAnimImporter* FBXImporter::CreateAnimImporter(UINT animIndex)
	{
		return new FBXAnimImporter(this, animIndex);
	}

	void FBXImporter::ExtractFBXFileDesc(fbxsdk::FbxScene* scene, fbxsdk::FbxImporter* importer)
	{
		mFBXFileImportDesc = new FBXFileImportDesc();
		auto info = importer->GetFileHeaderInfo();
		auto time = info->mCreationTimeStamp;
		mFBXFileImportDesc->Creater = VNameString(info->mCreator.Buffer());
		FbxSystemUnit SceneSystemUnit = scene->GetGlobalSettings().GetSystemUnit();
		mFBXFileImportDesc->FileSystemUnit = GetSystemUnitType(SceneSystemUnit);
		mFBXFileImportDesc->ScaleFactor = (float)FbxSystemUnit::m.GetConversionFactorFrom(SceneSystemUnit);
		//mFBXFileImportDesc.FBXScene = mScene;
		auto indexStart = mFilename.find_last_of('\\');
		auto indexEnd = mFilename.find_last_of('.');
		auto pureFileName = mFilename.substr(indexStart + 1, indexEnd - indexStart - 1);
		mFBXFileImportDesc->FileName = VNameString(pureFileName.c_str());
	}

	void FBXImporter::ExtractFBXOBjectDescs(fbxsdk::FbxScene* scene)
	{
		auto root = scene->GetRootNode();

		//mesh
		//std::vector<FBXMeshImportDesc> meshDescs;
		for (int i = 0; i < root->GetChildCount(); ++i)
		{
			ExtractFBXMeshesDescRecursive(root->GetChild(i), mFBXFileImportDesc->Meshes);
		}
		mFBXFileImportDesc->MeshNum = (UINT)mFBXFileImportDesc->Meshes.size();

		//animation
		FbxArray<FbxString*> animStackNameArray;
		scene->FillAnimStackNameArray(animStackNameArray);
		//std::vector<FBXAnimImportDesc*> animDescs;
		for (int i = 0; i < animStackNameArray.GetCount(); ++i)
		{
			// select the base layer from the animation stack
			FbxAnimStack* lAnimationStack = scene->FindMember<FbxAnimStack>(animStackNameArray[i]->Buffer());
			if (lAnimationStack == NULL)
			{
				// this is a problem. The anim stack should be found in the scene!
				break;
			}
			FbxAnimLayer* lanimationLayer = lAnimationStack->GetMember<FbxAnimLayer>();
			ExtractFBXAnimsDescRecursive(scene->GetRootNode(), lAnimationStack, lanimationLayer, mFBXFileImportDesc->Anims);
		}
		mFBXFileImportDesc->AnimNum = (UINT)mFBXFileImportDesc->Anims.size();
	}

	void FBXImporter::ExtractFBXMeshesDescRecursive(fbxsdk::FbxNode* node, std::vector<FBXMeshImportDesc>& outFBXMeshImportDesces)
	{
		auto att = node->GetNodeAttribute();
		if (att != nullptr)
		{
			auto attType = att->GetAttributeType();
			if (attType == FOT_Mesh)
			{
				auto mesh = (FbxMesh*)att;
				FBXMeshImportDesc meshDesc;;
				auto strName = FBXDataConverter::ConvertToStdString(node->GetName());
				meshDesc.Name = strName.c_str();
				//meshDesc->Hash = HashHelper::APHash(meshDesc->Name);
				meshDesc.Type = (EFBXObjectType)attType;
				meshDesc.FBXNode = node;
				if (mesh->GetDeformerCount() > 0)
				{
					meshDesc.HaveSkin = TRUE;
				}
				if (node->GetMaterialCount() > 0)
					meshDesc.RenderAtom = node->GetMaterialCount();
				else
					meshDesc.RenderAtom = 1;
				outFBXMeshImportDesces.push_back(meshDesc);
			}
		}
		for (int i = 0; i < node->GetChildCount(); ++i)
		{
			ExtractFBXMeshesDescRecursive(node->GetChild(i), outFBXMeshImportDesces);
		}
	}

	void FBXImporter::ExtractFBXAnimsDescRecursive(fbxsdk::FbxNode* node, FbxAnimStack* animStack, FbxAnimLayer* animLayer, std::vector<FBXAnimImportDesc>& outFBXAnimImportDesces)
	{
		FbxScene* scene = node->GetScene();
		std::string animName = FBXDataConverter::ConvertToStdString(animStack->GetName());
		auto att = node->GetNodeAttribute();
		if (att == NULL)
		{

		}
		else
		{
			bool createOption = false;
			auto attType = att->GetAttributeType();
			EFBXAnimType animType = AT_Skeleton;
			if (attType == EFBXObjectType::FOT_Skeleton || attType == EFBXObjectType::FOT_Null)//dummy as bone
			{
				if (Utils::IsSkeletonHaveAnimCurve(node, animLayer))
				{
					animType = AT_Skeleton;
					createOption = true;
				}
			}
			else if (Utils::IsHaveAnimCurve(node, animLayer) || Utils::IsHaveAnimCurve(att, animLayer))
			{
				animType = AT_Property;
				createOption = true;
			}
			if (createOption)
			{
				FBXAnimImportDesc animDesc;
				animDesc.Name = VNameString(animName.c_str());
				animDesc.FBXNode = node;
				animDesc.AnimLayer = animLayer;
				animDesc.AnimStack = animStack;
				animDesc.AnimationType = animType;
				auto span = animStack->GetLocalTimeSpan();
				auto start = span.GetStart().GetSecondDouble();
				auto duration = span.GetDuration().GetSecondDouble();
				auto end = span.GetStop().GetSecondDouble();
				auto rate = FbxTime::GetFrameRate(node->GetScene()->GetGlobalSettings().GetTimeMode());
				animDesc.Duration = (float)duration;
				animDesc.SampleRate = (float)rate;
				outFBXAnimImportDesces.push_back(animDesc);
			}

			//skeleton only root
			if (attType == EFBXObjectType::FOT_Skeleton || attType == EFBXObjectType::FOT_Null)
				return;
		}
		for (int i = 0; i < node->GetChildCount(); ++i)
		{
			ExtractFBXAnimsDescRecursive(node->GetChild(i), animStack, animLayer, outFBXAnimImportDesces);
		}
	}
}
