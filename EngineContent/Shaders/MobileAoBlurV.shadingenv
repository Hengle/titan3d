#ifndef _MOBILE_AO_BLUR_V_
#define _MOBILE_AO_BLUR_V_

#include "Inc/VertexLayout.cginc"
#include "Inc/Math.cginc"
#include "Inc/PostEffectCommon.cginc"

#include "dummy.gen"

//warning: Samp_ + tex_name!
Texture2D gSrcTex;
SamplerState Samp_gSrcTex;

PS_INPUT VS_Main(VS_INPUT input)
{
	PS_INPUT output = (PS_INPUT)0;

	output.vPosition = float4(input.vPosition.xyz, 1.0f);
	output.vUV = input.vUV;

	output.vTangent.x = input.vUV.y - 2.0f * gViewportSizeAndRcp.w;
	output.vTangent.y = input.vUV.y - gViewportSizeAndRcp.w;
	output.vTangent.z = input.vUV.y + gViewportSizeAndRcp.w;
	output.vTangent.w = input.vUV.y + 2.0f * gViewportSizeAndRcp.w;
	//output.vLightMap.x = input.vUV.y - 4.0f * gViewportSizeAndRcp.w;
	output.vLightMap.y = input.vUV.y - 3.0f * gViewportSizeAndRcp.w;
	output.vLightMap.z = input.vUV.y + 3.0f * gViewportSizeAndRcp.w;
	//output.vLightMap.w = input.vUV.y + 4.0f * gViewportSizeAndRcp.w;


	return output;
}

struct PS_OUTPUT
{
	half RT0 : SV_Target0;
};

PS_OUTPUT PS_Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;

	half P0 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.x)).r;
	half P1 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.y)).r;
	half P2 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.z)).r;
	half P3 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.w)).r;
	//half P4 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.x)).r;
	half P5 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.y)).r;
	half P6 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.z)).r;
	//half P7 = (half)gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.w)).r;

	half Pcenter = (half)gSrcTex.Sample(Samp_gSrcTex, input.vUV.xy).r;

	//half Pfinal = (P0 + P1 + P2 + P3 + P4 + P5 + P6 + P7 + Pcenter) / 9.0h;
	half Pfinal = (P0 + P1 + P2 + P3 + P5 + P6 + Pcenter) / 7.0h;

	output.RT0 = Pfinal;

	return output;
}

#endif