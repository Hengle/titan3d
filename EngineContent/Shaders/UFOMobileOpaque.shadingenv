//#ifndef _UFO_MOBILE_OPAQUE_
//#define _UFO_MOBILE_OPAQUE_
//
//#include "Inc/VertexLayout.cginc"
//#include "Inc/LightCommon.cginc"
//#include "Inc/Math.cginc"
//
//#include "dummy.gen"
//
//Texture2D gEnvMap;
//SamplerState Samp_gEnvMap;
//
//Texture2D gEyeEnvMap;
//SamplerState Samp_gEyeEnvMap;
//
//
//#ifdef MDFQUEUE_FUNCTION
//MDFQUEUE_FUNCTION
//#endif
//
////WARNING:don't change vs_main or ps_main's parameters name cause we also use it in c++;It's an appointment;
//PS_INPUT VS_Main(VS_INPUT input)
//{
//	PS_INPUT output = (PS_INPUT)0;
//
//	MTL_OUTPUT mtl = (MTL_OUTPUT)0;
//	//mtl template stuff;
//	{
//#ifdef MDFQUEUE_FUNCTION
//		MdfQueueDoModifiers(output, input);
//#endif
//
//#ifndef DO_VSInput_To_PSInput
//#define DO_VSInput_To_PSInput Default_VSInput2PSInput
//#endif
//
//		output = DO_VSInput_To_PSInput(input);
//
//#ifndef DO_VS_MATERIAL
//#define DO_VS_MATERIAL DoDefaultVSMaterial
//#endif
//
//		DO_VS_MATERIAL(output, mtl);
//	}
//
//	output.vPosition.xyz += mtl.mVertexOffset;
//
//	output.vWorldPos = mul(float4(output.vPosition.xyz, 1), WorldMatrix).xyz;  ;
//
//	output.vPosition = mul(float4(output.vWorldPos, 1), ViewPrjMtx);
//	output.vNormal = normalize(mul(float4(output.vNormal.xyz, 0), WorldMatrix).xyz);
//
//	output.vTangent.xyz = normalize(mul(float4(output.vTangent.xyz, 0), WorldMatrix).xyz);
//
//	return output;
//}
//
//struct PS_OUTPUT
//{
//	float4 RT0 : SV_Target0;
//};
//
//PS_OUTPUT PS_Main(PS_INPUT input)
//{
//	PS_OUTPUT output = (PS_OUTPUT)0;
//
//	MTL_OUTPUT mtl = Default_PSInput2Material(input);
//	//mtl template stuff;
//	{
//#ifndef DO_PS_MATERIAL
//#define DO_PS_MATERIAL DoDefaultPSMaterial
//#endif
//		DO_PS_MATERIAL(input, mtl);
//	}
//
//#ifdef MTL_ID_UNLIT
//	half3 Albedo = sRGB2Linear(mtl.mAlbedo);
//	half3 Emissive = mtl.mEmissive;
//	output.RT0 = half4(Albedo + Emissive, 1.0h);
//#else
//	{
//		half3 Albedo = sRGB2Linear(mtl.mAlbedo);
//		half3 N = mtl.mNormal;
//		half Metallic = mtl.mMetallic;
//		half Roughness = 1.0f - mtl.mRough;
//		half AbsSpecular = mtl.mAbsSpecular;
//		half3 Emissive = mtl.mEmissive;
//		half Alpha = mtl.mAlpha;
//		half AlphaTestThreshold = mtl.mAlphaTest;
//		half Transmit = mtl.mTransmit;
//		half3 SubAlbedo = sRGB2Linear(mtl.mSubAlbedo);
//		half AO = mtl.mAO;
//		half Mask = mtl.mMask;
//
//
//#ifdef ALPHA_TEST
//		clip(Alpha - AlphaTestThreshold);
//#endif // AlphaTest
//
//		half3 BaseShading = half3(0.0h, 0.0h, 0.0h);
//
//		half3 WorldPos = input.vWorldPos;
//		half3 L = -normalize();
//		half3 V = (half3)normalize(CameraPosition - WorldPos);
//
//#ifdef MTL_ID_SKIN
//	{
//		half Sbrtf = Transmit * 0.4h;
//		half Sbrdf = 1.0h - Sbrtf;
//		Metallic = 0.2h * Sbrdf;
//		half Sdiff = Sbrdf - Metallic;
//		AbsSpecular = 0.08h * AbsSpecular;
//		half Sspec = AbsSpecular - AbsSpecular * Metallic + Metallic;
//		
//		half3 OptDiffShading = Sdiff * Albedo;
//		half3 OptSpecShading = Sspec * Albedo;
//		
//		half3 SkyDiffuseShading = (0.45h * N.y + 0.55h) * mSkyLightIntensity *  mSkyLightColor * OptDiffShading * ECCd;
//
//		half3 H = normalize(L + V);
//
//		half NoLSigned = dot(N, L);
//		half NoL = max(NoLSigned, 0.0h);
//		half NoH = max(dot(N, H), 0.0h);
//		half LoH = max(dot(L, H), 0.0h);
//		
//		half3 DiffuseShading = NoL * ECCd *  * gDirLightColor_Intensity.rgb * OptDiffShading;
//
//		half3 SpecShading = BRDFMobileUFO(Roughness, N, H, NoH, LoH, OptSpecShading) * NoL *  * gDirLightColor_Intensity.rgb;
//
//		half Td = 1.0 - abs(NoLSigned);
//		half InverseNoL = 1.0h - max(0.0h, -NoLSigned);
//		half3 TransmitShading = Td * InverseNoL * SubAlbedo * Sbrtf *  * gDirLightColor_Intensity.rgb;
//
//		BaseShading = DiffuseShading + SpecShading + SkyDiffuseShading + TransmitShading;
//	
//	}
//#elif  defined(MTL_ID_TRANSMIT)
//
//
//#elif defined(MTL_ID_HAIR)
//	{
//		half3 SkyDiffuseShading = (0.45h * input.vNormal.y + 0.55h) * mSkyLightIntensity *  mSkyLightColor * Albedo * ECCd * 0.15f;
//
//		//sphere env mapping;
//		half NoV = max(dot(input.vNormal, V), 0.0f);
//		half3 VrN = 2.0f * NoV * input.vNormal - V;
//		half3 EnvMapUV = CalcSphereMapUV(VrN, 0.8h, gEnvMapMaxMipLevel);
//		half3 EnvSpecColor = gEnvMap.SampleLevel(Samp_gEnvMap, EnvMapUV.xy, EnvMapUV.z).rgb;
//		half3 EnvSpecShading = EnvSpecColor * 0.75h * Albedo * mSkyLightIntensity;
//
//		half3 HairShading = HairShadingMobile(Albedo, SubAlbedo, Roughness, L, V, input.vNormal, N, Transmit, Metallic) *  * gDirLightColor_Intensity.rgb;
//		
//		BaseShading = HairShading + SkyDiffuseShading + EnvSpecShading;
//		//BaseShading = HairShading + SkyDiffuseShading;
//		//BaseShading = HairShading;
//	}
//#elif defined(MTL_ID_EYE)
//		half Sdiff = 1.0f - Metallic;
//
//		half3 OptDiffShading = Sdiff * Albedo;
//
//		half3 SkyShading = (0.45h * N.y + 0.55h) * mSkyLightIntensity *  mSkyLightColor * OptDiffShading * ECCd;
//
//		half NoL = max(dot(N, L), 0.0f);
//		
//		half3 DiffuseShading = NoL *  * gDirLightColor_Intensity.rgb * OptDiffShading * ECCd;
//
//		//half NoV = max(dot(input.vNormal, V), 0.0f);
//		//half3 VrN = 2.0f * NoV * input.vNormal - V;
//
//		half NoV = max(dot(N, V), 0.0f);
//		half3 VrN = 2.0f * NoV * N - V;
//
//		half3 EnvMapUV = CalcSphereMapUV(VrN, 0.3f, gEyeEnvMapMaxMipLevel);
//		half3 EnvSpecLightColor = gEyeEnvMap.SampleLevel(Samp_gEyeEnvMap, EnvMapUV.xy, EnvMapUV.z).rgb;
//		half Threshold = 0.5h;
//		half Lum = max(0.0h, CalcLuminance(EnvSpecLightColor) - Threshold) * 2.0h;
//
//		half EyeSparkIntensity = 2.0h;
//		half3 EnvSpecShading = EnvSpecLightColor * Lum * Lum * mSkyLightIntensity * Mask * EyeSparkIntensity;
//
//		BaseShading = SkyShading + DiffuseShading/* + SpecShading*/;
//		BaseShading *= AO;
//		BaseShading += EnvSpecShading;
//#else
//		half Sdiff = 1.0f - Metallic;
//		AbsSpecular = 0.08h * AbsSpecular;
//		half Sspec = AbsSpecular - AbsSpecular * Metallic + Metallic;
//
//		half3 OptDiffShading = Sdiff * Albedo;
//		half3 OptSpecShading = Sspec * Albedo;
//
//		//sky light;
//		half3 SkyShading = (0.45h * N.y + 0.55h) * mSkyLightIntensity *  mSkyLightColor * OptDiffShading * ECCd;
//
//		half3 H = normalize(L + V);
//
//		//N.y *= 0.3h;
//		//half NoL = saturate(dot(N, L) * 4.0h);
//		half NoL = max(dot(N, L), 0.0f);
//		half NoH = max(dot(N, H), 0.0f);
//		half LoH = max(dot(L, H), 0.0f);
//
//		half3 DiffuseShading = NoL *  * gDirLightColor_Intensity.rgb * OptDiffShading * ECCd;
//
//		half3 SpecShading = BRDFMobileUFO(Roughness, N, H, NoH, LoH, OptSpecShading) * NoL *  * gDirLightColor_Intensity.rgb;
//
//		//sphere env mapping;
//		half NoV = max(dot(N, V), 0.0f);
//		half3 VrN = 2.0f * NoV * N - V;
//		half3 EnvMapUV = CalcSphereMapUV(VrN, Roughness, gEnvMapMaxMipLevel);
//		half3 EnvSpecLightColor = gEnvMap.SampleLevel(Samp_gEnvMap, EnvMapUV.xy, EnvMapUV.z).rgb;
//		half3 EnvSpec = EnvBRDFMobile(EnvSpecLightColor, OptSpecShading, Roughness, NoV) * mSkyLightIntensity;
//
//
//		BaseShading = DiffuseShading + SpecShading + SkyShading + EnvSpec;
//		//BaseShading = DiffuseShading + SpecShading + SkyShading;
//
//#endif
//
//
//
//
//		BaseShading += Emissive;
//
//
//		output.RT0 = half4(BaseShading, 1.0f);
//		
//
//		//output.RT0 = half4(V * 0.5h + 0.5h, 1.0f);
//		//output.RT0 = half4(N * 0.5h + 0.5h, 1.0f);
//		//output.RT0 = half4(1.0f, 1.0f, 1.0f, 1.0f);
//		//output.RT0 = half4(SkyShading, 1.0f);
//		//half3 NDCPos = half3((input.vPosition.xy * gViewportSizeAndRcp.zw - 0.5h) * half2(2.0h, -2.0h), input.vPosition.z);
//		//output.RT0 = half4(0.0h, NDCPos.y, 0.0h, 1.0h);
//
//		/*if (input.vPosition.w > 5.0h)
//		{
//			output.RT0 = half4(1.0h, 0.0h, 0.0h, 1.0h);
//		}
//		else
//		{
//			output.RT0 = half4(0.0h, 1.0h, 0.0h, 1.0h);
//		}*/
//		/*half4 ClipPos = mul(half4(input.vWorldPos, 1.0h), ViewPrjMtx);
//		if (ClipPos.w > 5.0h)
//		{
//			output.RT0 = half4(1.0h, 0.0h, 0.0h, 1.0h);
//		}
//		else
//		{
//			output.RT0 = half4(0.0h, 1.0h, 0.0h, 1.0h);
//		}*/
//
//	}
//
//#endif
//	
//	
//	return output;
//}
//
//#endif