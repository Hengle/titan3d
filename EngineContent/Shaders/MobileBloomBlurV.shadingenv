#ifndef _MOBILE_BLOOM_BLUR_V_
#define _MOBILE_BLOOM_BLUR_V_

#include "Inc/VertexLayout.cginc"
#include "Inc/Math.cginc"
#include "Inc/PostEffectCommon.cginc"

#include "dummy.gen"

//warning: Samp_ + tex_name!
Texture2D gSrcTex;
SamplerState Samp_gSrcTex;

PS_INPUT VS_Main(VS_INPUT input)
{
	PS_INPUT output = (PS_INPUT)0;

	output.vPosition = float4(input.vPosition.xyz, 1.0f);
	output.vUV = input.vUV;

	float scale = 1.0f / 8.0f;
	output.vTangent.x = input.vUV.y - 16.0f * scale * gViewportSizeAndRcp.w;
	output.vTangent.y = input.vUV.y - 12.0f * scale * gViewportSizeAndRcp.w;
	output.vTangent.z = input.vUV.y - 8.4f * scale * gViewportSizeAndRcp.w;
	output.vTangent.w = input.vUV.y - 6.0f * scale * gViewportSizeAndRcp.w;
	output.vLightMap.x = input.vUV.y - 3.9f * scale * gViewportSizeAndRcp.w;
	output.vLightMap.y = input.vUV.y - 2.5f * scale * gViewportSizeAndRcp.w;
	output.vLightMap.z = input.vUV.y - 1.2f * scale * gViewportSizeAndRcp.w;
	output.vLightMap.w = input.vUV.y + 1.2f * scale * gViewportSizeAndRcp.w;
	output.psCustomUV0.x = input.vUV.y + 2.5f * scale * gViewportSizeAndRcp.w;
	output.psCustomUV0.y = input.vUV.y + 3.9f * scale * gViewportSizeAndRcp.w;
	output.psCustomUV0.z = input.vUV.y + 6.0f * scale * gViewportSizeAndRcp.w;
	output.psCustomUV0.w = input.vUV.y + 8.4f * scale * gViewportSizeAndRcp.w;
	output.psCustomUV1.x = input.vUV.y + 12.0f * scale * gViewportSizeAndRcp.w;
	output.psCustomUV1.y = input.vUV.y + 16.0f * scale * gViewportSizeAndRcp.w;

	return output;
}

struct PS_OUTPUT
{
	half3 RT0 : SV_Target0;
};

PS_OUTPUT PS_Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;

	half3 P0 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.x)).rgb;
	half3 P1 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.y)).rgb;
	half3 P2 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.z)).rgb;
	half3 P3 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vTangent.w)).rgb;
	half3 P4 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.x)).rgb;
	half3 P5 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.y)).rgb;
	half3 P6 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.z)).rgb;
	half3 P7 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.vLightMap.w)).rgb;
	half3 P8 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.psCustomUV0.x)).rgb;
	half3 P9 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.psCustomUV0.y)).rgb;
	half3 P10 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.psCustomUV0.z)).rgb;
	half3 P11 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.psCustomUV0.w)).rgb;
	half3 P12 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.psCustomUV1.x)).rgb;
	half3 P13 = gSrcTex.Sample(Samp_gSrcTex, float2(input.vUV.x, input.psCustomUV1.y)).rgb;
	half3 Pcenter = gSrcTex.Sample(Samp_gSrcTex, input.vUV.xy).rgb;

	half3 Pfinal = (P0 + P1 + P2 + P3 + P4 + P9 + P10 + P11 + P12 + P13) * 0.1h * 0.75h + (P5 + P6 + P7 + P8) * 0.25h * 0.1h + Pcenter * 0.15h;
	
	output.RT0.rgb = Pfinal;
	return output;
}

#endif