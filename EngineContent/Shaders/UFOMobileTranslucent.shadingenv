//#ifndef _UFO_MOBILE_TRANSLUCENT_
//#define _UFO_MOBILE_TRANSLUCENT_
//
//#include "Inc/VertexLayout.cginc"
//#include "Inc/LightCommon.cginc"
//#include "Inc/Math.cginc"
//
//#include "dummy.gen"
//
//
//Texture2D gEnvMap;
//SamplerState Samp_gEnvMap;
//
//#ifdef MDFQUEUE_FUNCTION
//MDFQUEUE_FUNCTION
//#endif
//
////WARNING:don't change vs_main or ps_main's parameters name cause we also use it in c++;It's an appointment;
//PS_INPUT VS_Main(VS_INPUT input)
//{
//	PS_INPUT output = (PS_INPUT)0;
//
//	MTL_OUTPUT mtl = (MTL_OUTPUT)0;
//	//mtl template stuff;
//	{
//#ifdef MDFQUEUE_FUNCTION
//		MdfQueueDoModifiers(output, input);
//#endif
//
//#ifndef DO_VSInput_To_PSInput
//#define DO_VSInput_To_PSInput Default_VSInput2PSInput
//#endif
//
//		output = DO_VSInput_To_PSInput(input);
//
//#ifndef DO_VS_MATERIAL
//#define DO_VS_MATERIAL DoDefaultVSMaterial
//#endif
//
//		DO_VS_MATERIAL(output, mtl);
//	}
//
//	output.vPosition.xyz += mtl.mVertexOffset;
//
//	output.vWorldPos = mul(float4(output.vPosition.xyz, 1), WorldMatrix).xyz; ;
//
//	output.vPosition = mul(float4(output.vWorldPos, 1), ViewPrjMtx);
//	output.vNormal = normalize(mul(float4(output.vNormal.xyz, 0), WorldMatrix).xyz);
//
//	output.vTangent.xyz = normalize(mul(float4(output.vTangent.xyz, 0), WorldMatrix).xyz);
//
//	return output;
//}
//
//struct PS_OUTPUT
//{
//	float4 RT0 : SV_Target0;
//};
//
//PS_OUTPUT PS_Main(PS_INPUT input)
//{
//	PS_OUTPUT output = (PS_OUTPUT)0;
//
//	MTL_OUTPUT mtl = Default_PSInput2Material(input);
//	//mtl template stuff;
//	{
//#ifndef DO_PS_MATERIAL
//#define DO_PS_MATERIAL DoDefaultPSMaterial
//#endif
//		DO_PS_MATERIAL(input, mtl);
//	}
//
//	{
//		half3 Albedo = sRGB2Linear(mtl.mAlbedo);
//		half3 N = mtl.mNormal;
//		half Metallic = mtl.mMetallic;
//		half Roughness = 1.0f - mtl.mRough;
//		half AbsSpecular = mtl.mAbsSpecular;
//		half3 Emissive = mtl.mEmissive;
//		half Alpha = mtl.mAlpha;
//		half Transmit = mtl.mTransmit;
//		half3 SubAlbedo = sRGB2Linear(mtl.mSubAlbedo);
//		
//		half3 BaseShading = half3(0.0h, 0.0h, 0.0h);
//
//		half3 WorldPos = input.vWorldPos;
//		half3 L = -normalize();
//		half3 V = (half3)normalize(CameraPosition - WorldPos);
//
//
//
//#ifdef MTL_ID_HAIR
//		{
//			half3 SkyDiffuseShading = (0.45h * input.vNormal.y + 0.55h) * mSkyLightIntensity *  mSkyLightColor * Albedo * ECCd * 0.17f;
//
//			//sphere env mapping;
//			half NoV = max(dot(input.vNormal, V), 0.0f);
//			half3 VrN = 2.0f * NoV * input.vNormal - V;
//
//			half TempY = VrN.y + 1.0f;
//			half EnvMapUVOffset = 0.5f / sqrt(VrN.x * VrN.x + VrN.z * VrN.z + TempY * TempY);
//
//			float3 EnvMapUV = float3(0.0f, 0.0f, 0.0f);
//			EnvMapUV.xy = float2(VrN.x * EnvMapUVOffset + 0.5f, 0.5f + VrN.z * EnvMapUVOffset);
//			EnvMapUV.z = GetTexMipLevelFromRoughness(0.8h, gEnvMapMaxMipLevel);
//
//			half3 EnvSpecColor = gEnvMap.SampleLevel(Samp_gEnvMap, EnvMapUV.xy, EnvMapUV.z).rgb;
//			half3 EnvSpecShading = EnvSpecColor * 0.75h * Albedo * mSkyLightIntensity;
//
//			half3 HairShading = HairShadingMobile(Albedo, SubAlbedo, Roughness, L, V, input.vNormal, N, Transmit, Metallic) *  * gDirLightColor_Intensity.rgb;
//
//			BaseShading = HairShading + SkyDiffuseShading + EnvSpecShading;
//			//BaseShading = HairShading + SkyDiffuseShading;
//			//BaseShading = HairShading;
//		}
//
//#elif defined(TRANSLUCENT_LIGHTING)
//
//
//#else
//		BaseShading = Albedo;
//#endif
//
//		BaseShading += Emissive;
//
//		output.RT0 = half4(BaseShading, Alpha);
//
//	}
//
//
//	return output;
//}
//
//#endif