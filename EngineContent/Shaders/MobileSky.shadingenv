#ifndef _MOBILE_SKY_
#define _MOBILE_SKY_

#include "Inc/VertexLayout.cginc"
#include "Inc/LightCommon.cginc"
#include "Inc/Math.cginc"
#include "Inc/FogCommon.cginc"

#include "dummy.gen"


#ifdef MDFQUEUE_FUNCTION
MDFQUEUE_FUNCTION
#endif

//WARNING:don't change vs_main or ps_main's parameters name cause we also use it in c++;It's an appointment;
PS_INPUT VS_Main(VS_INPUT input)
{
	PS_INPUT output = (PS_INPUT)0;
#if defined(MDF_INSTANCING)
	output.PointLightIndices = PointLightIndices;
	output.SpecialData.x = PointLightNum;
#endif

	MTL_OUTPUT mtl = (MTL_OUTPUT)0;
	//mtl template stuff;
	{
#ifdef MDFQUEUE_FUNCTION
		MdfQueueDoModifiers(output, input);
#endif

#ifndef DO_VSInput_To_PSInput
#define DO_VSInput_To_PSInput Default_VSInput2PSInput
#endif

		DO_VSInput_To_PSInput(output, input);

#ifndef DO_VS_MATERIAL
#define DO_VS_MATERIAL DoDefaultVSMaterial
#endif

		DO_VS_MATERIAL(output, mtl);
	}

	output.vWorldPos = mul(float4(output.vPosition.xyz, 1), WorldMatrix).xyz;
	//matrix WVPMtx = mul(WorldMatrix, ViewPrjMtx);
	output.vPosition = mul(float4(output.vWorldPos.xyz, 1), ViewPrjMtx);
	output.vPosition.z = output.vPosition.w;
	
	//output.vNormal = normalize(mul(float4(output.vNormal.xyz, 0), WorldMatrix).xyz);
	output.vNormal = normalize(float3(0.0f, 0.0f, 0.0f) - output.vWorldPos) ;

	return output;
}

struct PS_OUTPUT
{
	float4 RT0 : SV_Target0;
};

PS_OUTPUT PS_Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;

	MTL_OUTPUT mtl = Default_PSInput2Material(input);
	//mtl template stuff;
	{
#ifndef DO_PS_MATERIAL
#define DO_PS_MATERIAL DoDefaultPSMaterial
#endif
		DO_PS_MATERIAL(input, mtl);
	}

	half3 Albedo = sRGB2Linear((half3)mtl.mAlbedo);
	half3 Emissive = (half3)mtl.mEmissive;
	half3 N = normalize((half3)mtl.mNormal);

	half3 WorldPos = (half3)input.vWorldPos;
	half3 L = normalize((half3)gDirLightDirection_Leak.xyz);
	//half3 V = (half3)normalize(CameraPosition - WorldPos);
	half3 SunColor = (half3)gDirLightColor_Intensity.rgb * half3(1.0h, 1.0h, 0.9h);
	half threshold = 0.99925h;
	half Isun = 50000.0h;
	//half SunMask =  max(dot(L, V) - threshold, 0.0h) * Isun;
	half SunMask = max(dot(L, N) - threshold, 0.0h) * Isun;

	half3 UnlitShading = Albedo + Emissive + SunColor * SunMask;

	//half3 WorldPos = input.vWorldPos;
	//half4 FogTRNF = half4(300.0h, 500.0h, 10.0h, 300.0h);
	//half3 SceneVS = input.psCustomUV0.xyz;
	//half FogAlpha = CalcHeighFogAlpha(WorldPos.y, SceneVS, FogTRNF);
	//half3 FogColor = half3(0.8h, 0.8h, 0.8h);
	////half3 FogColor = half3(1.0h, 0.0h, 0.0h);
	//half3 FogShading = FogColor * (mSkyLightColor + gDirLightColor_Intensity.rgb);
	//UnlitShading = lerp(UnlitShading, FogShading, FogAlpha);
	UnlitShading.b = (half)floor(UnlitShading.b * AO_M);
	output.RT0 = half4(UnlitShading, 1.0h);

	return output;
}

#endif