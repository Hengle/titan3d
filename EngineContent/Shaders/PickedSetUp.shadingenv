#ifndef _PICKED_SETUP_
#define _PICKED_SETUP_

#include "Inc/VertexLayout.cginc"


#ifdef MDFQUEUE_FUNCTION
MDFQUEUE_FUNCTION
#endif

//WARNING:don't change vs_main or ps_main's parameters name cause we also use it in c++;It's an appointment;
PS_INPUT VS_Main(VS_INPUT input)
{
	PS_INPUT output = (PS_INPUT)0;
#if defined(VS_NO_WorldTransform)
	output.PointLightIndices = PointLightIndices;
	output.SpecialData.x = PointLightNum;
#endif

	MTL_OUTPUT mtl = (MTL_OUTPUT)0;
	//mtl template stuff;
	{
#ifdef MDFQUEUE_FUNCTION
		MdfQueueDoModifiers(output, input);
#endif

#ifndef DO_VSInput_To_PSInput
#define DO_VSInput_To_PSInput Default_VSInput2PSInput
#endif

		DO_VSInput_To_PSInput(output, input);

#ifndef DO_VS_MATERIAL
#define DO_VS_MATERIAL DoDefaultVSMaterial
#endif

		DO_VS_MATERIAL(output, mtl);
	}

	output.vPosition.xyz += mtl.mVertexOffset;

	matrix WVPMtx = mul(WorldMatrix, ViewPrjMtx);
	output.vPosition = mul(float4(output.vPosition.xyz, 1.0h), WVPMtx);
	output.psCustomUV0.w = output.vPosition.w;

	return output;
}

struct PS_OUTPUT
{
	half2 RT0 : SV_Target0;
};

PS_OUTPUT PS_Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;

	MTL_OUTPUT mtl = Default_PSInput2Material(input);
	//mtl template stuff;
	{
#ifndef DO_PS_MATERIAL
#define DO_PS_MATERIAL DoDefaultPSMaterial
#endif
		DO_PS_MATERIAL(input, mtl);
	}

#ifdef ALPHA_TEST
	half Alpha = mtl.mAlpha;
	half AlphaTestThreshold = mtl.mAlphaTest;

	clip(Alpha - AlphaTestThreshold);
#endif // AlphaTest

	half PerPixelViewerDistance = (half)input.psCustomUV0.w;
	output.RT0 = half2((half)PickedID, PerPixelViewerDistance * rcp((half)gZFar));

	return output;
}

#endif