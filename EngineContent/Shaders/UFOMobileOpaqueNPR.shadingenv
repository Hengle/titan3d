//#ifndef _UFO_MOBILE_OPAQUE_NPR_
//#define _UFO_MOBILE_OPAQUE_NPR_
//
//#include "Inc/VertexLayout.cginc"
//#include "Inc/LightCommon.cginc"
//#include "Inc/Math.cginc"
//
//#include "dummy.gen"
//
////Texture2D gEnvMap;
////SamplerState Samp_gEnvMap;
//
//
//#ifdef MDFQUEUE_FUNCTION
//MDFQUEUE_FUNCTION
//#endif
//
////WARNING:don't change vs_main or ps_main's parameters name cause we also use it in c++;It's an appointment;
//PS_INPUT VS_Main(VS_INPUT input)
//{
//	PS_INPUT output = (PS_INPUT)0;
//
//	MTL_OUTPUT mtl = (MTL_OUTPUT)0;
//	//mtl template stuff;
//	{
//#ifdef MDFQUEUE_FUNCTION
//		MdfQueueDoModifiers(output, input);
//#endif
//
//#ifndef DO_VSInput_To_PSInput
//#define DO_VSInput_To_PSInput Default_VSInput2PSInput
//#endif
//
//		output = DO_VSInput_To_PSInput(input);
//
//#ifndef DO_VS_MATERIAL
//#define DO_VS_MATERIAL DoDefaultVSMaterial
//#endif
//
//		DO_VS_MATERIAL(output, mtl);
//	}
//
//	output.vPosition.xyz += mtl.mVertexOffset;
//
//	output.vWorldPos = mul(float4(output.vPosition.xyz, 1), WorldMatrix).xyz; ;
//
//	output.vPosition = mul(float4(output.vWorldPos, 1), ViewPrjMtx);
//	output.vNormal = normalize(mul(float4(output.vNormal.xyz, 0), WorldMatrix).xyz);
//
//	output.vTangent.xyz = normalize(mul(float4(output.vTangent.xyz, 0), WorldMatrix).xyz);
//
//	return output;
//}
//
//struct PS_OUTPUT
//{
//	float4 RT0 : SV_Target0;
//};
//
//PS_OUTPUT PS_Main(PS_INPUT input)
//{
//	PS_OUTPUT output = (PS_OUTPUT)0;
//
//	MTL_OUTPUT mtl = Default_PSInput2Material(input);
//	//mtl template stuff;
//	{
//#ifndef DO_PS_MATERIAL
//#define DO_PS_MATERIAL DoDefaultPSMaterial
//#endif
//		DO_PS_MATERIAL(input, mtl);
//	}
//
//#ifdef MTL_ID_UNLIT
//	half3 Albedo = sRGB2Linear(mtl.mAlbedo);
//	half3 Emissive = mtl.mEmissive;
//	output.RT0 = half4(Albedo + Emissive, 1.0h);
//#else
//	{
//		half3 Albedo = sRGB2Linear(mtl.mAlbedo);
//		half3 N = mtl.mNormal;
//		half Metallic = mtl.mMetallic;
//		half Smothness = mtl.mRough;
//		half AbsSpecular = mtl.mAbsSpecular;
//		half3 Emissive = mtl.mEmissive;
//		half Alpha = mtl.mAlpha;
//		half AlphaTestThreshold = mtl.mAlphaTest;
//		//half Transmit = mtl.mTransmit;
//		//half3 SubAlbedo = sRGB2Linear(mtl.mSubAlbedo);
//		half AO = mtl.mAO;
//		//half Mask = mtl.mMask;
//
//		half3 ShadowColor = mtl.mShadowColor;
//		half DeepShadow = mtl.mDeepShadow;
//		half3 MoodColor = mtl.mMoodColor;
//
//		half3 BaseShading = half3(0.0h, 0.0h, 0.0h);
//
//		half3 WorldPos = input.vWorldPos;
//		half3 L = -normalize();
//		half3 V = (half3)normalize(CameraPosition - WorldPos);
//
//#ifdef MTL_ID_SKIN
//		{
//			half3 EnvSpec = half3(0.0h, 0.0h, 0.0h);
//			half3 ShadowShading = half3(0.0h, 0.0h, 0.0h);
//			half3 BrightShading = half3(0.0h, 0.0h, 0.0h);
//			half3 SpecShading = half3(0.0h, 0.0h, 0.0h);
//			half3 TransmitShading = half3(0.0h, 0.0h, 0.0h);
//
//			half Ienv_d = 0.5h;
//			half Ishadow = 0.5h;
//			half Ibright = 1.0h;
//			half Ispec = 0.5h;
//			half Itransmit = 1.0h;
//
//			half LineEnvD = 0.2h;
//			half LineShadow = 0.5h;
//			half LineTransmitL = 0.5h;
//			half LineTransmitS = 0.4h;
//
//			half NoLsigned = dot(N, L);
//			half NoLunsigned = NoLsigned * 0.5h + 0.5h;
//			half NoL = max(0.0h, NoLsigned);
//
//			half NoV = max(0.0h, dot(N, V));
//
//			half LoVsigned = dot(L, V);
//
//			AO = max(0.0h, AO - 0.2h) * 1.25h;
//			if (NoLunsigned * AO < LineShadow)
//			{
//				Ishadow = 0.5h;
//				Ibright = 0.0h;
//			}
//			else
//			{
//				Ishadow = 0.0h;
//				Ibright = 1.0h;
//			}
//
//			if (DeepShadow < 0.5h && Ishadow == 0.5h)
//			{
//				Ishadow = 0.35h;
//				Ibright = 0.0h;
//			}
//
//			if (DeepShadow < 0.5h && NoLunsigned> 0.7h)
//			{
//				Ishadow = 0.5h;
//				Ibright = 0.0h;
//			}
//
//			if (DeepShadow < 0.5h && LoVsigned < 0.0h)
//			{
//				Ishadow = 0.35h;
//				Ibright = 0.0h;
//			}
//
//			if (DeepShadow < 0.5h && Ishadow == 0.0h)
//			{
//				Ishadow = 0.5h;
//				Ibright = 0.0h;
//			}
//
//			if (BRDF_BlinnPhongApprox(0.5h, NoV) * Metallic > 1.0h)
//			{
//				Ispec = 0.5h;
//			}
//			else
//			{
//				Ispec = 0.0h;
//			}
//
//			if (NoV < 0.25h && LoVsigned < -0.5h)
//			{
//				Itransmit = 1.0h;
//			}
//			else
//			{
//				Itransmit = 0.0h;
//			}
//
//			ShadowShading = Ishadow * ShadowColor * Albedo * ;
//
//			BrightShading = Ibright * Albedo *  * gDirLightColor_Intensity.rgb;
//
//			half3 StrongSpecColor = half3(0.8h, 0.8h, 0.8h) + Albedo * 0.2h;
//
//			SpecShading = Ispec * StrongSpecColor *  * gDirLightColor_Intensity.rgb;
//
//			TransmitShading = Itransmit *  * gDirLightColor_Intensity.rgb;
//			//TransmitShading = Itransmit * half3(1.0h, 0.0h, 0.0h) *  * gDirLightColor_Intensity.rgb;
//
//			BaseShading = ShadowShading + BrightShading + SpecShading + TransmitShading;
//	     }
//#elif  defined(MTL_ID_TRANSMIT)
//
//#elif defined(MTL_ID_HAIR)
//
//#elif defined(MTL_ID_EYE)
//
//#elif defined(MTL_ID_NPR_SCENE)
//		{
//			half3 OptDiffShading = Albedo;
//			
//			//sky light;
//			half3 SkyShading = (0.35h * N.y + 0.65h) * mSkyLightIntensity *  mSkyLightColor * OptDiffShading;
//
//			half NoL = max(dot(N, L), 0.0f);
//			
//			half3 DiffuseShading = NoL *  * gDirLightColor_Intensity.rgb * OptDiffShading * 2.6h;
//
//			BaseShading = SkyShading + DiffuseShading;
//		}
//
//#else
//		{
//			half3 EnvDiffuse = half3(0.0h, 0.0h, 0.0h);
//			half3 EnvSpec = half3(0.0h, 0.0h, 0.0h);
//			half3 ShadowShading = half3(0.0h, 0.0h, 0.0h);
//			half3 BrightShading = half3(0.0h, 0.0h, 0.0h);
//			half3 SpecShading = half3(0.0h, 0.0h, 0.0h);
//			half3 TransmitShading = half3(0.0h, 0.0h, 0.0h);
//
//			half Ienv_d = 0.5h;
//			half Ishadow = 0.5h;
//			half Ibright = 1.0h;
//			half Ispec = 0.5h;
//			half Itransmit = 1.0h;
//
//			half LineEnvD = 0.2h;
//			half LineShadow = 0.45h;
//			half LineTransmitL = 0.5h;
//			half LineTransmitS = 0.4h;
//
//			half NoLsigned = dot(N, L);
//			half NoLunsigned = NoLsigned * 0.5h + 0.5h;
//			half NoL = max(0.0h, NoLsigned);
//
//			half NoV = max(0.0h, dot(N, V));
//
//			//half3 H = normalize(L + V);
//			//half NoH = saturate(dot(N, H));
//
//			half LoVsigned = dot(L, V);
//
//			if (NoLunsigned < LineEnvD && NoV < LineEnvD)
//			{
//				Ienv_d = 0.5h;
//			}
//			else
//			{
//				Ienv_d = 0.0h;
//			}
//
//			AO = max(0.0h, AO - 0.2h) * 1.25h;
//			if (NoLunsigned * AO < LineShadow)
//			{
//				Ishadow = 0.5h;
//				Ibright = 0.0h;
//			}
//			else
//			{
//				Ishadow = 0.0h;
//				Ibright = 1.0h;
//			}
//
//			half SpecPbr = BRDF_BlinnPhongApprox(0.5h, NoV) * Metallic;
//			if (SpecPbr > 1.0h)
//			{
//				Ispec = 0.7h;
//			}
//			else
//			{
//				Ispec = 0.0h;
//			}
//
//			if (SpecPbr > 1.0h && Ishadow > 0.1h)
//			{
//				Ispec = 0.25h;
//			}
//
//			if (NoV < 0.2h && LoVsigned < -0.3h)
//			{
//				Itransmit = 1.0h;
//			}
//			else
//			{
//				Itransmit = 0.0h;
//			}
//
//			EnvDiffuse = Ienv_d * mSkyLightIntensity * MoodColor;
//
//			//EnvSpec = ???;
//
//			ShadowShading = Ishadow * ShadowColor * Albedo * ;
//
//			BrightShading = Ibright * Albedo *  * gDirLightColor_Intensity.rgb;
//
//			half3 StrongSpecColor = half3(0.8h, 0.8h, 0.8h) + Albedo * 0.2h;
//			
//			SpecShading = Ispec * StrongSpecColor *  * gDirLightColor_Intensity.rgb;
//
//			TransmitShading = Itransmit * Albedo *  * gDirLightColor_Intensity.rgb;
//			//TransmitShading = Itransmit * half3(1.0h, 0.0h, 0.0h) *  * gDirLightColor_Intensity.rgb;
//
//			BaseShading = EnvDiffuse + EnvSpec + ShadowShading + BrightShading + SpecShading + TransmitShading;
//		}
//#endif
//
//
//		BaseShading += Emissive;
//
//
//		output.RT0 = half4(BaseShading, 1.0f);
//
//
//		//output.RT0 = half4(V * 0.5h + 0.5h, 1.0f);
//		//output.RT0 = half4(N * 0.5h + 0.5h, 1.0f);
//		//output.RT0 = half4(1.0f, 1.0f, 1.0f, 1.0f);
//		//output.RT0 = half4(SkyShading, 1.0f);
//		//half3 NDCPos = half3((input.vPosition.xy * gViewportSizeAndRcp.zw - 0.5h) * half2(2.0h, -2.0h), input.vPosition.z);
//		//output.RT0 = half4(0.0h, NDCPos.y, 0.0h, 1.0h);
//
//		/*if (input.vPosition.w > 5.0h)
//		{
//			output.RT0 = half4(1.0h, 0.0h, 0.0h, 1.0h);
//		}
//		else
//		{
//			output.RT0 = half4(0.0h, 1.0h, 0.0h, 1.0h);
//		}*/
//		/*half4 ClipPos = mul(half4(input.vWorldPos, 1.0h), ViewPrjMtx);
//		if (ClipPos.w > 5.0h)
//		{
//			output.RT0 = half4(1.0h, 0.0h, 0.0h, 1.0h);
//		}
//		else
//		{
//			output.RT0 = half4(0.0h, 1.0h, 0.0h, 1.0h);
//		}*/
//
//	}
//
//#endif
//
//
//	return output;
//}
//
//#endif