#include "../../Inc/VertexLayout.cginc"

#include "Material"
#include "MdfQueue"

#include "../../Inc/SysFunctionDefImpl.cginc"

cbuffer cbPerShadingEnv DX_AUTOBIND//: register(b4)
{
	matrix RenderMatrix;
	float4 RenderColor;
	float RenderOpacity;
}

Texture2D SourceTexture DX_AUTOBIND;
SamplerState Samp_SourceTexture DX_AUTOBIND;

#ifdef MDFQUEUE_FUNCTION
	MDFQUEUE_FUNCTION
#endif

PS_INPUT VS_Main( VS_INPUT input1 )
{
	VS_MODIFIER input = VS_INPUT_TO_VS_MODIFIER(input1);
	PS_INPUT output = (PS_INPUT)0;

#ifdef MDFQUEUE_FUNCTION
	MdfQueueDoModifiers(output, input);
#endif

	output.vPosition = float4(input.vPosition.xyz, 1.0f);
	output.vUV = input.vUV;

	return output;
}

struct PS_OUTPUT
{
	float4 RenderTarget0 : SV_Target0;
};
PS_OUTPUT PS_Main( PS_INPUT input )
{
#ifndef DO_PS_MATERIAL
	#define DO_PS_MATERIAL DoDefaultPSMaterial
#endif

	MTL_OUTPUT mtl = Default_PSInput2Material(input);

	DO_PS_MATERIAL(input, mtl);

	half Alpha = (half)mtl.mAlpha;
	half AlphaTestThreshold = (half)mtl.mAlphaTest;

#ifdef ALPHA_TEST
	clip(Alpha - AlphaTestThreshold);
#endif // AlphaTest

	PS_OUTPUT output = (PS_OUTPUT)0;

	float4 texColor = SourceTexture.SampleLevel(Samp_SourceTexture, input.vUV.xy, 0);
	float alpha = texColor.a * RenderColor.w;

	output.RenderTarget0 = half4(texColor.rgb * RenderColor.xyz, alpha);

	return output;
}