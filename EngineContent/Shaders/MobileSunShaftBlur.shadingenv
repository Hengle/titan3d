#ifndef _MOBILE_SUNSHAFT_BLUR_
#define _MOBILE_SUNSHAFT_BLUR_

#include "Inc/VertexLayout.cginc"
#include "Inc/Math.cginc"
#include "Inc/PostEffectCommon.cginc"

#include "dummy.gen"

Texture2D gSunShaftMask;
SamplerState Samp_gSunShaftMask;

PS_INPUT VS_Main(VS_INPUT input1)
{
	VS_MODIFIER input = VS_INPUT_TO_VS_MODIFIER(input1);
	PS_INPUT output = (PS_INPUT)0;

	output.vPosition = float4(input.vPosition.xyz, 1.0f);
	output.vUV = input.vUV;

	float scale = gSunPosNDC.z;
	float platform_uv_flag = gSunPosNDC.w;

	output.vTangent.xy = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 1.0f / 13.0f * scale), platform_uv_flag);
	output.vTangent.zw = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 2.0f / 13.0f * scale), platform_uv_flag);
	output.vLightMap.xy = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 3.0f / 13.0f * scale), platform_uv_flag);
	output.vLightMap.zw = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 4.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV0.xy = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 5.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV0.zw = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 6.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV1.xy = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 7.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV1.zw = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 8.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV2.xy = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 9.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV2.zw = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 10.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV3.xy = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 11.0f / 13.0f * scale), platform_uv_flag);
	output.psCustomUV3.zw = NDC2UV(lerp(input.vPosition.xy, gSunPosNDC.xy, 12.0f / 13.0f * scale), platform_uv_flag);

	return output;
}

struct PS_OUTPUT
{
	half2 RT0 : SV_Target0;
};

PS_OUTPUT PS_Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;

	half2 P0 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.vTangent.xy).rg;
	half2 P1 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.vTangent.zw).rg;
	half2 P2 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.vLightMap.xy).rg;
	half2 P3 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.vLightMap.zw).rg;
	half2 P4 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV0.xy).rg;
	half2 P5 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV0.zw).rg;
	half2 P6 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV1.xy).rg;
	half2 P7 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV1.zw).rg;
	half2 P8 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV2.xy).rg;
	half2 P9 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV2.zw).rg;
	half2 P10 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV3.xy).rg;
	half2 P11 = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.psCustomUV3.zw).rg;
	half2 Pself = (half2)gSunShaftMask.Sample(Samp_gSunShaftMask, input.vUV.xy).rg;

	half2 Pfinal = (P0 + P1 + P2 + P3 + P4 + P5 + P6 + P7 + P8 + P9 + P10 + P11 + Pself) * (1.0h / 13.0h);

	output.RT0.rg = Pfinal;

	return output;
}

#endif