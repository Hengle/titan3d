#ifndef _UFO_MOBILE_OUTLINE_NPR_
#define _UFO_MOBILE_OUTLINE_NPR_

#include "Inc/VertexLayout.cginc"
#include "Inc/LightCommon.cginc"
#include "Inc/Math.cginc"

#include "dummy.gen"


#ifdef MDFQUEUE_FUNCTION
MDFQUEUE_FUNCTION
#endif

//WARNING:don't change vs_main or ps_main's parameters name cause we also use it in c++;It's an appointment;
PS_INPUT VS_Main(VS_INPUT input)
{
	PS_INPUT output = (PS_INPUT)0;
#if defined(MDF_INSTANCING)
	output.PointLightIndices = PointLightIndices;
	output.SpecialData.x = PointLightNum;
#endif

	MTL_OUTPUT mtl = (MTL_OUTPUT)0;
	//mtl template stuff;
	{
#ifdef MDFQUEUE_FUNCTION
		MdfQueueDoModifiers(output, input);
#endif

#ifndef DO_VSInput_To_PSInput
#define DO_VSInput_To_PSInput Default_VSInput2PSInput
#endif

		DO_VSInput_To_PSInput(output, input);

#ifndef DO_VS_MATERIAL
#define DO_VS_MATERIAL DoDefaultVSMaterial
#endif

		DO_VS_MATERIAL(output, mtl);
	}

	output.vPosition.xyz += mtl.mVertexOffset;

	//float OutlineThickness = 0.002f * 0.6f;
	float OutlineThickness = 0.002f * output.vColor.a;
	
	float ZDivOn = 2.5h;

	matrix WorldViewMatrix = mul(WorldMatrix, CameraViewMatrix);
	float4 PosV = mul(float4(output.vPosition.xyz, 1), WorldViewMatrix);
	
	float ZDivInv = min(ZDivOn, PosV.z);

	float3 Nv = normalize(mul(float4(output.vNormal, 0), WorldViewMatrix).xyz) * ZDivInv;
	
	PosV = PosV + float4(Nv, 0.0f) * OutlineThickness;
	output.vPosition = mul(PosV, PrjMtx);

	
	return output;
}

struct PS_OUTPUT
{
	float4 RT0 : SV_Target0;
};

PS_OUTPUT PS_Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;

//	MTL_OUTPUT mtl = Default_PSInput2Material(input);
//	//mtl template stuff;
//	{
//#ifndef DO_PS_MATERIAL
//#define DO_PS_MATERIAL DoDefaultPSMaterial
//#endif
//		DO_PS_MATERIAL(input, mtl);
//	}

	////front color is green;
	//half3 OutlineColor = half3(0.0h, 1.0h, 0.0h);
	//
	//if (input.vNormal.z > 0)
	//{	
	//	//back color is blue;
	//	OutlineColor = half3(0.0h, 0.0h, 1.0h);
	//}//front color is green;
	//half3 OutlineColor = half3(0.0h, 1.0h, 0.0h);
	//
	//if (input.vNormal.z > 0)
	//{	
	//	//back color is blue;
	//	OutlineColor = half3(0.0h, 0.0h, 1.0h);
	//}
	
	half3 OutlineColor = half3(0.1h, 0.05h, 0.05h);
	/*if (input.vColor.r > 0.2h)
	{
		input.vColor.rgb = half3(0.25h, 0.1h, 0.1h);
	}*/
	OutlineColor = input.vColor.rgb;
	//half3 OutlineColor = half3(0.5h, 0.1h, 0.1h);
	output.RT0 = half4(OutlineColor, 1.0f);


	return output;
}

#endif