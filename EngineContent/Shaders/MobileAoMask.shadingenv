#ifndef _MOBILE_AO_
#define _MOBILE_AO_

#include "Inc/VertexLayout.cginc"
#include "Inc/Math.cginc"
#include "Inc/PostEffectCommon.cginc"

#include "dummy.gen"

Texture2D gBaseSceneView;
SamplerState Samp_gBaseSceneView;

PS_INPUT VS_Main(VS_INPUT input1)
{
	VS_MODIFIER input = VS_INPUT_TO_VS_MODIFIER(input1);
	PS_INPUT output = (PS_INPUT)0;

	output.vPosition = float4(input.vPosition.xyz, 1.0f);
	output.vUV = input.vUV;

	return output;
}

struct PS_OUTPUT
{
	half RT0 : SV_Target0;
};

PS_OUTPUT PS_Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;

	float LinearDepth = gBaseSceneView.Sample(Samp_gBaseSceneView, input.vUV.xy).a;
	float NdcW = LinearDepth * gZFar;
	half NdcWh = (half)NdcW;

	half PlatformFlag = (half)gAoParam.y;

	half3 PosVS = ReconstructPosVS(input.vUV.xy, NdcW, PrjInvMtx, LinearDepth, gAoParam.y);
	float3 hpPosVS = (float3)PosVS;

	//half3 NormalVS = normalize(cross(ddx(PosVS), ddy(PosVS))) * 0.5f + 0.5f;
	half3 NormalVS = normalize(cross(ddx(hpPosVS), ddy(hpPosVS)));

	half RssScale = (half)gAoParam.x;
	half Rvs = 0.5h;
	half Rvs2 = Rvs * Rvs;
	half PrjScale = 250.0h;
	//half Rss = PrjScale * Rvs / max(0.5h, NdcWh);
	half Rss = PrjScale * Rvs / NdcWh;
	half BiasOffset = saturate((NdcWh - 2.0h) / 48.0h);
	half bias = (half)gAoParam.z;
	bias = bias + BiasOffset * BiasOffset * (Rvs2 - bias);
	half ao = 0.0h;
	half Rssf = 0.0h;

	/*static const half RadShuffle[] =
	{
		0.09721h, 0.14684h, 0.10987h, 0.14587h,
		0.10354h, 0.15052h, 0.11281h, 0.15387h
	};*/

	/*static const half RadShuffle[] =
	{
		0.11921h, 0.17684h, 0.13187h, 0.15687h,
		0.12354h, 0.18052h, 0.14281h, 0.16487h
	};*/

	for (uint idx = 0; idx < 8; idx++)
	{	
		half angle = (half(idx) + 0.5h) / 8.0h * 2.0h * Pi;
		
		//half sin_s = 0.0h;
		//half cos_s = 0.0h;
		//sincos(angle, sin_s, cos_s);
		half2 Duv = half2(cos(angle), sin(angle)) * half2(1.0h, PlatformFlag);

		//half alpha = lerp(0.12h, 0.18h, rand(1.0h + half(idx), input.vUV.xy));
		//Rssf = Rss * alpha;
		Rssf = Rss * RssScale;
		//Rssf = Rss * RadShuffle[idx];
		
		float2 SamplerUV = input.vUV.xy + float2(Duv * Rssf) * gViewportSizeAndRcp.zw;
		float SamplerDepth = gBaseSceneView.Sample(Samp_gBaseSceneView, SamplerUV).a;
		float SamplerNdcW = SamplerDepth * gZFar;
		half3 SamplerPosVS = ReconstructPosVS(SamplerUV, SamplerNdcW, PrjInvMtx, SamplerDepth, gAoParam.y);

		half3 S = SamplerPosVS - PosVS;
		half SoS = dot(S, S);
		half SoN = dot(S, NormalVS);
		half ro = max(Rvs2 - SoS, 0.0h);
		ao += ro * max((SoN - bias) * rcp(SoS + bias), 0.0h);
	}

	ao = max(0.0h, 1.0h - ao * (half)gAoParam.w / 8.0h);

	output.RT0 = ao;	
	return output;
}

#endif
