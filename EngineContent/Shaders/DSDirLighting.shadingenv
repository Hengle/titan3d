//#include "Inc/VertexLayout.cginc"
//#include "Inc/CommonDeferredShadingFunc.cginc"
//#include "Inc/CommonLightFunc.cginc"
//
//#include "dummy.gen"
//
//Texture2D txAlbedoTexture;
//SamplerState samAlbedoTexture;
//
//Texture2D txNormBloomSpecTexture;
//SamplerState samNormBloomSpecTexture;
//
//Texture2D txDepthStencilTexture;
//SamplerState samDepthStencilTexture;
//
//PS_INPUT VS_Main( VS_INPUT input )
//{
//	PS_INPUT output = (PS_INPUT)0;
//
//	output = Default_VSInput2PSInput(input);
//
//	return output;
//}
//
//struct PS_OUTPUT
//{
//	float4 RenderTarget0 : SV_Target0;
//};
//
//PS_OUTPUT PS_Main( PS_INPUT input )
//{
//	PS_OUTPUT output = (PS_OUTPUT)0;
//
//	float vZ = txDepthStencilTexture.Sample(samDepthStencilTexture, input.vUV).r;
//	//vZ = vZ * 2 - 1;//For GLES
//	
//
//	half3 SimpleShading = half3(0.0f, 0.0f, 0.0f);
//
//	half4 MRT0 = (half4)txAlbedoTexture.Sample( samAlbedoTexture, input.vUV );
//	half4 MRT1 = (half4)txNormBloomSpecTexture.Sample( samNormBloomSpecTexture, input.vUV );
//
//	Simple_GBufferData GBuffer = DecodeGBuffer(MRT0, MRT1);
//
//	/*
//	if(vZ==1)
//	{
//		output.RenderTarget0.xyz = GBuffer.MtlColorDiffuse;
//		output.RenderTarget0.w = 1;
//
//		return output;
//	}
//	*/
//
//	// half3 Nv = (half3)mul(half4(GBuffer.WorldNormal, 0), CameraViewMatrix).xyz;
//	// Nv = (half3)normalize(Nv);
//	// half3 Lv = (half3)mul(half4(DirLightDirection, 0), CameraViewMatrix).xyz;
//	// Lv = (half3)normalize(Lv * (-1.0));
//	// float4 Pos_ViewSpace = UnwrapViewPosition(input.vPosition, vZ);
//	half3 Nv = (half3)GBuffer.WorldNormal;
//	half3 Lv = -(half3);
//	
//	//light shading part;
//	float4 worldPos = UnwrapWorldPosition(input.vPosition, vZ);
//	half3 V = (half3)normalize(CameraPosition - worldPos.xyz);
//
//	half3 LightShadingAmbient = half3(0, 0, 0);
//	half3 LightShadingDiffuse = half3(0, 0, 0);
//	half3 MobileShadingSpec = half3(0, 0, 0);
//
//	LightShadingAmbient = (half3)mDirLightingAmbient.xyz;
//
//	SimpleLight_Diffuse(LightShadingDiffuse, Nv, Lv,  (half3)mDirLightingDiffuse.xyz, mDirLightShadingSSS);
//	LightShadingDiffuse = LightShadingDiffuse * ;
//
//	half3 LightColorSpec = mDirLightingSpecular.xyz;
//	SimpleLight_Specular(MobileShadingSpec, Lv, V, Nv, LightColorSpec, GBuffer.MtlColorSpecular, GBuffer.Roughness);
//
//	MobileShadingSpec = MobileShadingSpec * (half)mDirLightSpecularIntensity;
//
//
//	half ShadowEffect = 1.0;
//
//	SimpleShading = (LightShadingDiffuse * GBuffer.MtlColorDiffuse + MobileShadingSpec) * ShadowEffect + LightShadingAmbient * GBuffer.MtlColorDiffuse;
//
//	output.RenderTarget0.xyz = SimpleShading.xyz;
//	//output.RenderTarget0.xyz = half3(1.0f, 0.0f, 0.0f);
//	//output.RenderTarget0.xyz = MRT0.xyz;
//
//	output.RenderTarget0.w = 1;
//
//	return output;
//}