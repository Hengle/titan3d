#include "Inc/VertexLayout.cginc"

#include "dummy.gen"

#include "Inc/SysFunctionDefImpl.cginc"

#ifdef MDFQUEUE_FUNCTION
	MDFQUEUE_FUNCTION
#endif

PS_INPUT VS_Main( VS_INPUT input )
{
	PS_INPUT output = (PS_INPUT)0;
#if defined(VS_NO_WorldTransform)
	output.PointLightIndices = PointLightIndices;
	output.SpecialData.x = PointLightNum;
#endif

#ifdef MDFQUEUE_FUNCTION
	MdfQueueDoModifiers(output, input);
#endif

#ifndef DO_VSInput_To_PSInput
	#define DO_VSInput_To_PSInput Default_VSInput2PSInput
#endif

	DO_VSInput_To_PSInput(output, input);
	
	MTL_OUTPUT mtl = (MTL_OUTPUT)0;
#ifndef DO_VS_MATERIAL
	#define DO_VS_MATERIAL DoDefaultPSMaterial
#endif

	//mtl.vUV = output.vUV;
	DO_VS_MATERIAL(output,mtl);
	//output.vUV = mtl.vUV;

	matrix WVPMtx = mul(WorldMatrix, ViewPrjMtx);
	output.vPosition = mul(float4(input.vPosition.xyz, 1), WVPMtx);

	return output;
}

struct PS_OUTPUT
{
	float4 RenderTarget0 : SV_Target0;
};

PS_OUTPUT PS_Main( PS_INPUT input )
{
#ifndef DO_PS_MATERIAL
	#define DO_PS_MATERIAL DoDefaultPSMaterial
#endif

	MTL_OUTPUT mtl = Default_PSInput2Material(input);

	DO_PS_MATERIAL(input, mtl);

	PS_OUTPUT output = (PS_OUTPUT)0;

	output.RenderTarget0 = half4(mtl.mAlbedo, 1.0f);

	return output;
}