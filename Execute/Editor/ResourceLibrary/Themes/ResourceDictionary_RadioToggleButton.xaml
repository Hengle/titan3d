<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:local="clr-namespace:ResourceLibrary"
    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
	<SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F"/>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_CheckedBackground}" Color="#FFBDBDBD" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_UnCheckedBackground}" Color="#00000000" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_CheckedForeground}" Color="Black" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_UnCheckedForeground}" Color="White" />
    <SolidColorBrush x:Key="{ComponentResourceKey ResourceId=RadioToggleButton_MouseOverBackground, TypeInTargetAssembly={x:Type local:CustomResources}}" Color="#FF262626"/>
    <SolidColorBrush x:Key="{ComponentResourceKey ResourceId=RadioToggleButton2_MouseOverBackground, TypeInTargetAssembly={x:Type local:CustomResources}}" Color="#FF323232"/>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_CheckedBackground}" Color="#FF262626" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_UnCheckedBackground}" Color="#00000000" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_CheckedForeground}" Color="#FFE7E7E7" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_UnCheckedForeground}" Color="#FFE7E7E7" />
    <Style x:Key="CheckRadioFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButtonStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_UnCheckedForeground}}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_UnCheckedBackground}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#00000000"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
						<Grid x:Name="grid">
							<ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="3"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_MouseOverBackground}}"/>
						</Trigger>
						<Trigger Property="HasContent" Value="true">
							<!--<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>-->
                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
							<Setter Property="Padding" Value="4,0,0,0"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_CheckedBackground}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton_CheckedForeground}}"/>
                        </Trigger>
						<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=DisableForeground, TypeInTargetAssembly={x:Type local:CustomResources}}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButtonStyle2}" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_UnCheckedForeground}}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_UnCheckedBackground}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#00000000"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="PART_Rect" Width="3" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=ToggleButtonChecked}}" Visibility="Hidden"/>
                            <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Column="1"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_MouseOverBackground}}"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="true">
                            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>-->
                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="PART_Rect" Value="Visible"/>
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_CheckedBackground}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:CustomResources}, ResourceId=RadioToggleButton2_CheckedForeground}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=DisableForeground, TypeInTargetAssembly={x:Type local:CustomResources}}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>