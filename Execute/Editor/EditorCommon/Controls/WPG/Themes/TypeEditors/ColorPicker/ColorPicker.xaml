<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:widgets="clr-namespace:WPG.Themes.TypeEditors"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="WPG.Themes.TypeEditors.ColorPicker"
             xmlns:res="clr-namespace:ResourceLibrary;assembly=ResourceLibrary"	
             x:Name="this"
             Padding="5"
             Width="416.154" Background="#FF666666" Height="279.89">

    <UserControl.Resources>

        <DrawingBrush x:Key="ChessBrush"
		              TileMode="Tile"
		              ViewportUnits="Absolute"
		              Viewport="0 0 9 9">
            <DrawingBrush.Drawing>
                <DrawingGroup>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="0 0 2 2" />
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <GeometryDrawing Brush="Gray">
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <RectangleGeometry Rect="0 0 1 1" />
                                <RectangleGeometry Rect="1 1 1 1" />
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingGroup>
            </DrawingBrush.Drawing>
        </DrawingBrush>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ToggleButtonStyle_Picker" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Image x:Name="Icon" Source="/ResourceLibrary;component/Icons/colorpicker.png"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Source" TargetName="Icon" Value="/ResourceLibrary;component/Icons/colorpickerPressed.png"/>
                            </Trigger>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>

    <DockPanel >
        <StackPanel VerticalAlignment="Top"
			DockPanel.Dock="Right"
			Margin="10 0 0 0">

            <Border Background="{StaticResource ChessBrush}"
				BorderBrush="Black"
				BorderThickness="1"
				Height="50" Margin="10,0,0,0">
                <Rectangle Margin="0">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding Color, ElementName=this}" />
                    </Rectangle.Fill>
                </Rectangle>
            </Border>
            <StackPanel Width="149">
                <Grid Margin="0 3 0 0" Height="21.8366666666667">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                        <ColumnDefinition MinWidth="112" Width="1"/>
                    </Grid.ColumnDefinitions>
                    <ToggleButton x:Name="isDrawPixelToggleButton" Grid.Column="0" Height="20" Width="20" BorderThickness="0" Checked="DrawPixelToggleButton_Checked" Unchecked="DrawPixelToggleButton_UnChecked" Style="{DynamicResource ToggleButtonStyle_Picker}" Background="#00000000"  />
                    <TextBlock Grid.Column="1" Text="#" Margin="1.172,3" HorizontalAlignment="Center" VerticalAlignment="Center" Height="15.837" Width="7.656" />
                    <widgets:HexTextBox Text="{Binding Hex, ElementName=this, UpdateSourceTrigger=PropertyChanged}"
						Margin="0" Grid.Column="2" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBoxStyle_Default}}"/>
                </Grid>
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="51*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="H"
						VerticalAlignment="Center" Margin="0" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBlockStyle_Default}}"/>
                    <widgets:ValueWithRangeEditor OutValue="{Binding H, ElementName=this, Mode=TwoWay}"
						VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
						MinValue="0"
						MaxValue="255"
						Margin="0" Grid.Column="1" />
                </Grid>
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="51*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="S"
						VerticalAlignment="Center"
						HorizontalAlignment="Left" Margin="0" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBlockStyle_Default}}"/>
                    <widgets:ValueWithRangeEditor OutValue="{Binding S, ElementName=this, Mode=TwoWay}"
						VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
						MinValue="0"
						MaxValue="255"
						Margin="0" Grid.Column="1" />
                </Grid>
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="51*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="V"
						VerticalAlignment="Center"
						HorizontalAlignment="Left" Margin="0" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBlockStyle_Default}}"/>
                    <widgets:ValueWithRangeEditor OutValue="{Binding V, ElementName=this, Mode=TwoWay}"
						VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
						MinValue="0"
						MaxValue="255"
						Margin="0" Grid.Column="1" />
                </Grid>
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="51*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="R"
						VerticalAlignment="Center"
						HorizontalAlignment="Left" Margin="0" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBlockStyle_Default}}"/>
                    <widgets:ValueWithRangeEditor OutValue="{Binding R, ElementName=this, Mode=TwoWay}"
						VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
						MinValue="0"
						MaxValue="255"
						Margin="0" Grid.Column="1" />
                </Grid>
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="51*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="G"
						VerticalAlignment="Center"
						HorizontalAlignment="Left" Margin="0" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBlockStyle_Default}}"/>
                    <widgets:ValueWithRangeEditor OutValue="{Binding G, ElementName=this, Mode=TwoWay}"
						VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
						MinValue="0"
						MaxValue="255"
						Margin="0" Grid.Column="1" />
                </Grid>
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="51*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="B"
						VerticalAlignment="Center"
						HorizontalAlignment="Left" Margin="0" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBlockStyle_Default}}"/>
                    <widgets:ValueWithRangeEditor OutValue="{Binding B, ElementName=this, Mode=TwoWay}"
						VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
						MinValue="0"
						MaxValue="255"
						Margin="0" Grid.Column="1" />
                </Grid>
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="51*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="A"
						VerticalAlignment="Center"
						HorizontalAlignment="Left" Margin="0" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type res:CustomResources}, ResourceId=TextBlockStyle_Default}}"/>
                    <widgets:ValueWithRangeEditor OutValue="{Binding A, ElementName=this, Mode=TwoWay}"
						VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
						MinValue="0"
						MaxValue="255"
						Margin="0" Grid.Column="1" />
                </Grid>
            </StackPanel>
        </StackPanel>

        <Border Margin="10 0 0 0"
			DockPanel.Dock="Right">
            <widgets:Picker Orientation="Vertical"
				Value="{Binding H, ElementName=this}"
				Minimum="360"
				Maximum="0"
				Marker="{Binding ElementName=arrows}"
				Width="20">
                <Border Margin="0 -1">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0 1">
                            <GradientStop Offset="0"
								Color="#F00" />
                            <GradientStop Offset="0.16"
								Color="#F0F" />
                            <GradientStop Offset="0.33"
								Color="#00F" />
                            <GradientStop Offset="0.5"
								Color="#0FF" />
                            <GradientStop Offset="0.76"
								Color="#0F0" />
                            <GradientStop Offset="0.85"
								Color="#FF0" />
                            <GradientStop Offset="1"
								Color="#F00" />
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Grid x:Name="arrows"
					IsHitTestVisible="False"
					VerticalAlignment="Top"
					Margin="-5">
                    <Path HorizontalAlignment="Left"
						Data="M 0 0 L 5 5 L 0 10 Z"
						Fill="Black" />
                    <Path HorizontalAlignment="Right"
						Data="M 0 0 L -5 5 L 0 10 Z"
						Fill="Black" />
                </Grid>
            </widgets:Picker>
        </Border>

        <Border BorderBrush="Black"
			BorderThickness="1">
            <widgets:Picker Value="{Binding S, ElementName=this}"
				Marker="{Binding ElementName=point}"
				ClipToBounds="True">
                <widgets:Picker Orientation="Vertical"
					Value="{Binding V, ElementName=this}"
					Minimum="100"
					Maximum="0"
					Marker="{Binding ElementName=point}">
                    <Rectangle Height="300">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="1 0">
                                <GradientStop Offset="0"
									Color="White" />
                                <GradientStop Offset="1"
									Color="{Binding HueColor, ElementName=this}" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle>
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="0 1">
                                <GradientStop Offset="0"
									Color="#0000" />
                                <GradientStop Offset="1"
									Color="#F000" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Grid x:Name="point"
						VerticalAlignment="Top"
						HorizontalAlignment="Left"
						Width="12"
						Height="12"
						Margin="-6 -6 0 0">
                        <Ellipse Stroke="Black"
							IsHitTestVisible="False" />
                        <Ellipse Stroke="White"
							Margin="1"
							IsHitTestVisible="False" />
                    </Grid>
                </widgets:Picker>
            </widgets:Picker>
        </Border>
    </DockPanel>

</UserControl>
