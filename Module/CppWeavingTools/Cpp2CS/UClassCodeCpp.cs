using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CppWeaving.Cpp2CS
{
    class UClassCodeCpp : UCodeBase
    {
        public UClass mClass;
        public UClassCodeCpp()
        {

        }
        public UClassCodeCpp(UClass kls)
        {
            this.FullName = kls.FullName;
            mClass = kls;
        }
        public override string GetFileExt()
        {
            return ".cpp2cs.cpp";
        }
        public override void OnGenCode()
        {
            AddLine($"//generated by cmc");
            ClangSharp.Interop.CXFile tfile;
            uint line, col, offset;
            mClass.Decl.Location.GetFileLocation(out tfile, out line, out col, out offset);
            AddLine($"#include \"{UProjectSettings.Pch}\"");
            AddLine($"#include \"{UTypeManagerBase.GetRegularPath(tfile.ToString())}\"");
            AddLine($"#include \"{UProjectSettings.CppPODStruct}\"");

            NewLine();
            AddLine($"#define new VNEW");
            NewLine();

            var visitor_name = $"{this.FullName.Replace(".", "_")}_Visitor";
            bool bExpProtected = false;
            string friendNS = "";
            foreach (var i in mClass.Friends)
            {
                if (i.Contains(visitor_name))
                {
                    bExpProtected = true;
                    var frd = i;
                    if (frd.StartsWith("class "))
                    {
                        frd = frd.Substring("class ".Length);
                    }
                    var pos = frd.LastIndexOf("::");
                    if (pos >= 0)
                    {
                        friendNS = frd.Substring(0, pos);
                    }
                    break;
                }
            }

            if (friendNS != "")
            {
                AddLine($"namespace {friendNS}");
                PushBrackets();
            }

            AddLine($"struct {visitor_name}");
            PushBrackets();
            {
                GenConstructor(bExpProtected, visitor_name);
                GenCast(bExpProtected, visitor_name);
                GenFields(bExpProtected, visitor_name);
                GenFunction(bExpProtected, visitor_name);
            }
            PopBrackets(true);

            if (friendNS != "")
            {
                PopBrackets();
            }

            NewLine();
            GenPInvokeConstructor(bExpProtected, visitor_name);
            NewLine();
            GenPInvokeCast(bExpProtected, visitor_name);
            NewLine();
            GenPInvokeFields(bExpProtected, visitor_name);
            NewLine();
            GenPInvokeFunction(bExpProtected, visitor_name);
        }
        protected void GenFields(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.Properties)
            {
                if (i.Access != EAccess.Public && bExpProtected == false)
                    continue;

                string retTypeStr;
                if (i.IsDelegate)
                {
                    retTypeStr = "void*";
                }
                else
                {
                    retTypeStr = i.GetCppTypeName();
                }
                if (i.IsDelegate)
                {
                    AddLine($"static void* FieldGet__{i.Name}({mClass.ToCppName()}* self)");
                }
                else
                {
                    AddLine($"static {retTypeStr} FieldGet__{i.Name}({mClass.ToCppName()}* self)");
                }
                PushBrackets();
                {
                    AddLine($"if(self==nullptr)");
                    PushBrackets();
                    {
                        if (retTypeStr.EndsWith("&") == false)
                            AddLine($"return EngineNS::VGetTypeDefault<{retTypeStr}>();");
                        else
                        {
                            retTypeStr = retTypeStr.Substring(0, retTypeStr.Length - 1);
                            AddLine($"{retTypeStr}* tmp = nullptr;");
                            AddLine($"return *tmp;");
                        }
                    }
                    PopBrackets();
                    AddLine($"return ({retTypeStr})self->{i.Name};");
                }
                PopBrackets();
                if (i.IsDelegate)
                {
                    AddLine($"static void FieldSet__{i.Name}({mClass.ToCppName()}* self, {i.GetCppTypeName()})");
                }
                else
                {
                    AddLine($"static void FieldSet__{i.Name}({mClass.ToCppName()}* self, {i.GetCppTypeName()} value)");
                }
                PushBrackets();
                {
                    AddLine($"if(self==nullptr)");
                    PushBrackets();
                    {
                        AddLine($"return;");
                    }
                    PopBrackets();

                    if (i.NumOfElement > 0)
                    {
                        AddLine($"for (int i = 0; i < {i.NumOfElement}; i++)");
                        PushBrackets();
                        {
                            AddLine($"self->{i.Name}[i] = value[i];");
                        }
                        PopBrackets();
                    }
                    else
                    {
                        if (i.IsDelegate)
                        {
                            AddLine($"*(void**)&(self->{i.Name}) = (void*){i.Name};");
                        }
                        else
                        {
                            AddLine($"self->{i.Name} = value;");
                        }
                    }
                }
                PopBrackets();
            }

        }
        protected void GenPInvokeFields(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.Properties)
            {
                if (i.Access != EAccess.Public && bExpProtected == false)
                    continue;
                string retType = i.GetCppTypeName();
                if (i.IsDelegate)
                {
                    retType = "void*";
                }
                else if (i.IsStructType && i.NumOfTypePointer == 0)
                {
                    var structType = i.PropertyType as UStruct;
                    if (structType.ReturnPodName() != null)
                        retType = structType.ReturnPodName();
                    else
                        retType = $"{i.PropertyType.FullName.Replace(".", "_")}_PodType";
                }
                AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {retType} TSDK_{visitor_name}_FieldGet__{i.Name}({mClass.ToCppName()}* self)");
                PushBrackets();
                {
                    if (i.IsStructType)
                    {
                        AddLine($"auto tmp_result = {visitor_name}::FieldGet__{i.Name}(self);");
                        AddLine($"return {UProjectSettings.VReturnValueMarshal}<{i.GetCppTypeName()},{retType}>(tmp_result);");
                    }
                    else
                        AddLine($"return {visitor_name}::FieldGet__{i.Name}(self);");
                }
                PopBrackets();
                if (i.IsDelegate)
                    AddLine($"extern \"C\" {UProjectSettings.GlueExporter} void TSDK_{visitor_name}_FieldSet__{i.Name}({mClass.ToCppName()}* self, {i.GetCppTypeName()})");
                else
                    AddLine($"extern \"C\" {UProjectSettings.GlueExporter} void TSDK_{visitor_name}_FieldSet__{i.Name}({mClass.ToCppName()}* self, {i.GetCppTypeName()} value)");
                PushBrackets();
                {
                    if (i.IsDelegate)
                        AddLine($"{visitor_name}::FieldSet__{i.Name}(self, {i.Name});");
                    else
                        AddLine($"{visitor_name}::FieldSet__{i.Name}(self, value);");
                }
                PopBrackets();
            }

        }
        protected void GenFunction(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.Functions)
            {
                if (i.Access != EAccess.Public && bExpProtected == false)
                    continue;

                string selfArg = $"{mClass.ToCppName()}* self";
                if (i.IsStatic)
                {
                    selfArg = "";
                }
                else
                {
                    if (i.Parameters.Count > 0)
                    {
                        selfArg += ",";
                    }
                }
                if (i.Parameters.Count > 0)
                    AddLine($"static {i.ReturnType.GetCppTypeName()} {i.Name}({selfArg} {i.GetParameterDefineCpp()})");
                else
                    AddLine($"static {i.ReturnType.GetCppTypeName()} {i.Name}({selfArg})");
                PushBrackets();
                {
                    var retTypeStr = i.ReturnType.GetCppTypeName();
                    if (i.IsStatic == false)
                    {
                        AddLine($"if(self==nullptr)");
                        PushBrackets();
                        {
                            if (retTypeStr.EndsWith("&") == false)
                                AddLine($"return EngineNS::VGetTypeDefault<{i.ReturnType.GetCppTypeName()}>();");
                            else
                            {
                                retTypeStr = retTypeStr.Substring(0, retTypeStr.Length - 1);
                                AddLine($"{retTypeStr}* tmp = nullptr;");
                                AddLine($"return *tmp;");
                            }
                        }
                        PopBrackets();
                    }
                    if (i.IsStatic)
                    {
                        AddLine($"return ({retTypeStr}){mClass.ToCppName()}::{i.Name}({i.GetParameterCalleeCpp()});");
                    }
                    else
                    {
                        AddLine($"return ({retTypeStr})self->{i.Name}({i.GetParameterCalleeCpp()});");
                    }
                }
                PopBrackets();
            }
        }
        protected void GenPInvokeFunction(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.Functions)
            {
                if (i.Access != EAccess.Public && bExpProtected == false)
                    continue;

                string retTypeStr = i.ReturnType.GetCppTypeName();
                if (i.ReturnType.IsStructType && i.ReturnType.NumOfTypePointer == 0)
                {
                    var structType = i.ReturnType.PropertyType as UStruct;
                    if (structType.ReturnPodName() != null)
                        retTypeStr = structType.ReturnPodName();
                    else
                        retTypeStr = $"{i.ReturnType.PropertyType.FullName.Replace(".", "_")}_PodType";
                }

                string callArg = "self";
                if (i.IsStatic)
                {
                    callArg = "";
                }
                if (i.Parameters.Count > 0)
                {
                    if (callArg == "")
                        callArg += $"{i.GetParameterCalleeCpp()}";
                    else
                        callArg += $", {i.GetParameterCalleeCpp()}";
                }

                if (i.IsStatic)
                {
                    if (i.Parameters.Count == 0)
                        AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {retTypeStr} TSDK_{visitor_name}_{i.Name}_{i.FunctionHash}()");
                    else
                        AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {retTypeStr} TSDK_{visitor_name}_{i.Name}_{i.FunctionHash}({i.GetParameterDefineCpp()})");
                }
                else
                {
                    if (i.Parameters.Count == 0)
                        AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {retTypeStr} TSDK_{visitor_name}_{i.Name}_{i.FunctionHash}({mClass.ToCppName()}* self)");
                    else
                        AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {retTypeStr} TSDK_{visitor_name}_{i.Name}_{i.FunctionHash}({mClass.ToCppName()}* self, {i.GetParameterDefineCpp()})");
                }

                PushBrackets();
                {
                    if (i.ReturnType.IsStructType)
                    {
                        AddLine($"auto tmp_result = {visitor_name}::{i.Name}({callArg});");
                        AddLine($"return {UProjectSettings.VReturnValueMarshal}<{i.ReturnType.GetCppTypeName()},{retTypeStr}>(tmp_result);");
                    }
                    else
                    {
                        AddLine($"return {visitor_name}::{i.Name}({callArg});");
                    }
                }
                PopBrackets();
            }
        }
        protected virtual void GenConstructor(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.Constructors)
            {
                if (i.Access != EAccess.Public && bExpProtected == false)
                    continue;

                if (i.Parameters.Count > 0)
                    AddLine($"static {mClass.ToCppName()}* CreateInstance({i.GetParameterDefineCpp()})");
                else
                    AddLine($"static {mClass.ToCppName()}* CreateInstance()");
                PushBrackets();
                {
                    AddLine($"return new {mClass.ToCppName()}({i.GetParameterCalleeCpp()});");
                }
                PopBrackets();
            }
            if (mClass.HasMeta(UProjectSettings.SV_Dispose))
            {
                var dispose = mClass.GetMeta(UProjectSettings.SV_Dispose);
                AddLine($"static void Dispose({mClass.ToCppName()}* self)");
                PushBrackets();
                {
                    AddLine($"{dispose};");
                }
                PopBrackets();
            }
        }
        protected virtual void GenPInvokeConstructor(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.Constructors)
            {
                if (i.Access != EAccess.Public && bExpProtected == false)
                    continue;
                if (i.Parameters.Count > 0)
                    AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {mClass.ToCppName()}* TSDK_{visitor_name}_CreateInstance_{i.FunctionHash}({i.GetParameterDefineCpp()})");
                else
                    AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {mClass.ToCppName()}* TSDK_{visitor_name}_CreateInstance_{i.FunctionHash}()");
                PushBrackets();
                {
                    AddLine($"return {visitor_name}::CreateInstance({i.GetParameterCalleeCpp()});");
                }
                PopBrackets();
            }
            if (mClass.HasMeta(UProjectSettings.SV_Dispose))
            {
                var dispose = mClass.GetMeta(UProjectSettings.SV_Dispose);
                AddLine($"extern \"C\" {UProjectSettings.GlueExporter} void TSDK_{visitor_name}_Dispose({mClass.ToCppName()}* self)");
                PushBrackets();
                {
                    AddLine($"return {visitor_name}::Dispose(self);");
                }
                PopBrackets();
            }
        }
        protected void GenCast(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.BaseTypes)
            {
                AddLine($"static {i.ToCppName()}* CastTo_{i.ToCppName().Replace("::", "_")}({mClass.ToCppName()}* self)");
                PushBrackets();
                {
                    AddLine($"return static_cast<{i.ToCppName()}*>(self);");
                }
                PopBrackets();
            }
        }
        protected void GenPInvokeCast(bool bExpProtected, string visitor_name)
        {
            foreach (var i in mClass.BaseTypes)
            {
                AddLine($"extern \"C\" {UProjectSettings.GlueExporter} {i.ToCppName()}* TSDK_{visitor_name}_CastTo_{i.ToCppName().Replace("::", "_")}({mClass.ToCppName()}* self)");
                PushBrackets();
                {
                    AddLine($"return {visitor_name}::CastTo_{i.ToCppName().Replace("::", "_")}(self);");
                }
                PopBrackets();
            }
        }
    }
}
