using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClangHeadTools.CSharp
{
    //public unsafe struct AS
    //{
    //    public static implicit operator AS*(AS v)
    //    {
    //        return (AS*)v.mPointer;
    //    }
    //    private void* mPointer
    //    {
    //        get
    //        {
    //            fixed (AS* pThis = &this) return pThis;
    //        }
    //    }
    //    static void test()
    //    {
    //        AS t = new AS();
    //        AS* p = t;
    //    }
    //}
    public class CSClassBinderWriter : ClassWriter
    {
        public override void GenCode()
        {
            AddLine($"//This cs is generated by THT.exe");

            AddLine($"using System;");
            AddLine($"using System.Runtime.InteropServices;");

            NewLine();

            if (!string.IsNullOrEmpty(Namespace))
            {
                AddLine($"namespace {Namespace}");
                PushBrackets();
            }
            bool bLayoutStruct = Parent.HasMeta(SV_LayoutStruct);

            if (bLayoutStruct)
            {
                AddLine($"[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit, Size = {mDecl.TypeForDecl.Handle.SizeOf}, Pack = {mDecl.TypeForDecl.Handle.AlignOf})]");
            }

            if (HasMeta(SV_Dispose))
            {
                AddLine($"public unsafe partial struct {Name} : EngineNS.IPtrType, IDisposable");
            }
            else
            {
                AddLine($"public unsafe partial struct {Name} : EngineNS.IPtrType");
            }
            PushBrackets();
            {
                if (bLayoutStruct)
                {
                    DefineStructInherit_Impl(mDecl, "!@!# no name");
                    //AddLine($"private void* mPointer {{ get {{ fixed ({Name}* pThis = &this) return pThis; }} }}");
                    AddLine($"public IntPtr NativePointer {{ get {{ fixed ({Name}* pThis = &this) return (IntPtr)pThis; }} set {{ }} }}");

                    AddLine($"public void UnsafeCallDestructor()");
                    PushBrackets();
                    {
                        var ns = FullName.Replace(".", "_");
                        AddLine($"fixed ({Name}* mPointer = &this)");
                        PushBrackets();
                        {
                            AddLine($"{GluePrefix}_{ns}__Call_Destruct_OnMemory(mPointer);");
                        }
                        PopBrackets();
                    }
                    PopBrackets();
                }
                else
                {
                    DefineStructInherit(mDecl, "CppLayout");
                    AddLine($"private void* mPointer;");
                    AddLine($"public void UnsafeSetPointer(void* p) {{ mPointer = p; }}");
                    AddLine($"public {Name}* CppPointer {{ get => ({Name}*)mPointer; }}");
                    AddLine($"public {Name}* Ptr {{ get => ({Name}*)mPointer; }}");
                    AddLine($"public IntPtr NativePointer {{ get => (IntPtr)mPointer; set => mPointer = value.ToPointer(); }}");

                    AddLine($"public CppLayout* UnsafeAsLayout {{ get => (CppLayout*)mPointer; }}");

                    AddLine($"public bool IsValidPointer {{ get => mPointer != (void*)0; }}");

                    AddLine($"public static implicit operator {Name}* ({Name} v)");
                    PushBrackets();
                    {
                        AddLine($"return ({Name}*)v.mPointer;");
                    }
                    PopBrackets();
                }

                AddLine($"#region Constructor&Cast");
                GenCast(bLayoutStruct);
                AddLine($"#endregion");

                WriteMethod(bLayoutStruct);

                WriteField(bLayoutStruct);

                AddLine($"#region SDK Method");
                AddLine($"const string ModuleNC=EngineNS.CoreSDK.CoreModule;");
                GenCast_PInvoke();
                WriteMethod_PInvoke(bLayoutStruct);
                AddLine($"#endregion");

                AddLine($"#region SDK Fields");
                WriteField_PInvoke();
                AddLine($"#endregion");
            }
            PopBrackets();

            if (!string.IsNullOrEmpty(Namespace))
            {
                PopBrackets();
            }
        }
        private void WriteMethod(bool bLayoutStruct)
        {
            AddLine($"#region Method");
            foreach (var i in mDecl.Methods)
            {
                if (IsIgnoreFunction(i))
                    continue;

                if (CheckTypes(i) == false)
                {
                    continue;
                }

                if (i.Name == mDecl.Name)
                {//构造器后面处理
                    GenConstructor(bLayoutStruct, i);
                    continue;
                }

                string access = "private";
                switch (i.Access)
                {
                    case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXPublic:
                        access = "public";
                        break;
                    case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXProtected:
                        access = "protected";
                        break;
                    case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXPrivate:
                        access = "private";
                        break;
                }
                bool retAsString = false;
                bool retWrapper = false;
                var retTypeStr = GetFullNameCS(i.ReturnType);
                if (GetFullNameCS(i.ReturnType)== "sbyte*" && !HasMeta(i.Attrs, SV_NoStringConverter))
                {
                    retAsString = true;
                    if (i.IsStatic)
                        AddLine($"{access} static string {i.Name}({GetParameterDefine(i)})");
                    else
                        AddLine($"{access} string {i.Name}({GetParameterDefine(i)})");
                }
                else
                {
                    if (GetPointerNumOfType(i.ReturnType) == 1)
                    {
                        var kls = CodeWriterManager.Instance.FindClass(GetNakedFullNameCS(i.ReturnType.Handle));
                        if (kls != null && !kls.HasMeta(SV_LayoutStruct))
                        {
                            retWrapper = true;
                            retTypeStr = GetNakedFullNameCS(i.ReturnType.Handle);
                        }
                    }

                    if (i.IsStatic)
                        AddLine($"{access} static {retTypeStr} {i.Name}({GetParameterDefine(i)})");
                    else
                        AddLine($"{access} {retTypeStr} {i.Name}({GetParameterDefine(i)})");
                }

                PushBrackets();
                {
                    var fn = FullName.Replace(".", "_");

                    if (bLayoutStruct && i.IsStatic == false)
                    {
                        AddLine($"unsafe");
                        PushBrackets();
                        AddLine($"fixed ({Name}* mPointer = &this)");
                        PushBrackets();
                    }
                    
                    {
                        string selfStr = "mPointer";
                        if (i.IsStatic)
                        {
                            selfStr = "";
                        }
                        else
                        {
                            if (i.Parameters.Count > 0)
                            {
                                selfStr = "mPointer,";
                            }
                        }
                        string retStr = "return ";
                        if (i.ReturnType.Kind == ClangSharp.Interop.CXTypeKind.CXType_Void)
                        {
                            retStr = "";
                        }
                        if (retAsString)
                        {
                            if (i.Parameters.Count > 0)
                            {
                                AddLine($"{retStr}System.Runtime.InteropServices.Marshal.PtrToStringAnsi((IntPtr){GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfStr} {GetParameterCallee(i)}));");
                            }
                            else
                            {
                                AddLine($"{retStr}System.Runtime.InteropServices.Marshal.PtrToStringAnsi((IntPtr){GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfStr}));");
                            }
                        }
                        else
                        {
                            if (retWrapper)
                            {
                                if (i.Parameters.Count > 0)
                                {
                                    AddLine($"{retStr} new {retTypeStr}({GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfStr} {GetParameterCallee(i)}));");
                                }
                                else
                                {
                                    AddLine($"{retStr} new {retTypeStr}({GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfStr}));");
                                }
                            }
                            else
                            {
                                if (i.Parameters.Count > 0)
                                {
                                    AddLine($"{retStr}{GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfStr} {GetParameterCallee(i)});");
                                }
                                else
                                {
                                    AddLine($"{retStr}{GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfStr});");
                                }
                            }
                        }
                    }

                    if (bLayoutStruct && i.IsStatic == false)
                    {
                        PopBrackets();
                        PopBrackets();
                    }
                }
                PopBrackets();

                if (NeedReferenceFunction(i))
                {
                    if (retAsString)
                    {
                        if (i.IsStatic)
                            AddLine($"{access} static string {i.Name}({GetParameterDefineRefConverter(i)})");
                        else
                            AddLine($"{access} string {i.Name}({GetParameterDefineRefConverter(i)})");
                    }
                    else
                    {
                        if (i.IsStatic)
                            AddLine($"{access} static {GetFullNameCS(i.ReturnType)} {i.Name}({GetParameterDefineRefConverter(i)})");
                        else
                            AddLine($"{access} {GetFullNameCS(i.ReturnType)} {i.Name}({GetParameterDefineRefConverter(i)})");
                    }
                    PushBrackets();
                    {
                        FixedRefConverter(i);
                        PushBrackets();
                        {
                            if (i.ReturnType.Kind == ClangSharp.Interop.CXTypeKind.CXType_Void)
                            {
                                AddLine($"{i.Name}({GetParameterCallee(i)});");
                            }
                            else
                            {
                                AddLine($"return {i.Name}({GetParameterCallee(i)});");
                            }
                        }
                        PopBrackets();
                    }
                    PopBrackets();
                }
            }
            AddLine($"#endregion");
        }
        private void WriteMethod_PInvoke(bool bLayoutStruct)
        {
            if (bLayoutStruct)
            {
                var ns = FullName.Replace(".", "_");
                AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                AddLine($"extern static void {GluePrefix}_{ns}__Call_Destruct_OnMemory(void* self);");
            }

            foreach (var i in mDecl.Methods)
            {
                if (IsIgnoreFunction(i))
                    continue;
                if (CheckTypes(i) == false)
                {
                    continue;
                }

                if (i.Name == mDecl.Name)
                {//构造器后面处理
                    GenConstructor_PInvoke(i, bLayoutStruct);
                    continue;
                }

                AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                var fn = FullName.Replace(".", "_");

                string selfArg = $"void* self";
                if (i.IsStatic)
                {
                    selfArg = "";
                }
                else
                {
                    if (i.Parameters.Count > 0)
                    {
                        selfArg += ",";
                    }
                }
                if (i.Parameters.Count > 0)
                    AddLine($"extern static {GetFullNameCS(i.ReturnType)} {GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfArg} {GetParameterDefine(i)});");
                else
                    AddLine($"extern static {GetFullNameCS(i.ReturnType)} {GluePrefix}_{fn}_{i.Name}__{GetMethodHash(i)}({selfArg});");
            }
        }
        private void WriteField(bool bLayoutStruct)
        {
            AddLine($"#region Field");
            foreach (var i in mDecl.Fields)
            {
                bool bDelegate = false;
                var typeStr = GetFullNameCS(i.Type);
                if (GetFullName(i.Type).Contains("(*)"))
                {
                    bDelegate = true;
                    typeStr = "System.IntPtr";
                }

                if (bDelegate == false && IsIgnoreField(i))
                    continue;

                var fn = Namespace.Replace(".", "_");

                string access = "";
                switch (i.Access)
                {
                    case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXPublic:
                        access = "public";
                        break;
                    case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXProtected:
                        access = "protected";
                        break;
                    case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXPrivate:
                        access = "private";
                        break;
                }
                access = "public";
                

                bool retWrapper = false;
                if (GetPointerNumOfType(i.Type) == 1)
                {
                    var kls = CodeWriterManager.Instance.FindClass(GetNakedFullNameCS(i.Type.Handle));
                    if (kls != null && !kls.HasMeta(SV_LayoutStruct))
                    {
                        retWrapper = true;
                        typeStr = GetNakedFullNameCS(i.Type.Handle);
                    }
                }

                if (typeStr == "sbyte*")
                {
                    if (bLayoutStruct)
                        AddLine($"{access} string m_{i.Name}");
                    else
                        AddLine($"{access} string {i.Name}");
                    PushBrackets();
                    {
                        AddLine($"get");
                        PushBrackets();
                        {
                            if (bLayoutStruct)
                            {
                                AddLine($"unsafe");
                                PushBrackets();
                                AddLine($"fixed ({Name}* mPointer = &this)");
                                PushBrackets();
                            }
                            string pinvoke = $"{GluePrefix}_{fn}_{mDecl.Name}__FieldGet__{i.Name}(mPointer)";
                            AddLine($"return System.Runtime.InteropServices.Marshal.PtrToStringAnsi((IntPtr){pinvoke});");
                            if (bLayoutStruct)
                            {
                                PopBrackets();
                                PopBrackets();
                            }
                        }
                        PopBrackets();

                        AddLine($"set");
                        PushBrackets();
                        {
                            if (bLayoutStruct)
                            {
                                AddLine($"unsafe");
                                PushBrackets();
                                AddLine($"fixed ({Name}* mPointer = &this)");
                                PushBrackets();
                            }
                            AddLine($"var strPtr = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(value);");
                            AddLine($"{GluePrefix}_{fn}_{mDecl.Name}__FieldSet__{i.Name}(mPointer, (sbyte*)strPtr.ToPointer());");
                            AddLine("System.Runtime.InteropServices.Marshal.FreeHGlobal(strPtr);");
                            if (bLayoutStruct)
                            {
                                PopBrackets();
                                PopBrackets();
                            }
                        }
                        PopBrackets();
                    }
                    PopBrackets();
                }
                else
                {
                    if (bLayoutStruct)
                        AddLine($"{access} {typeStr} m_{i.Name}");
                    else
                        AddLine($"{access} {typeStr} {i.Name}");
                    PushBrackets();
                    {
                        if (bDelegate == false)
                        {
                            AddLine($"get");
                            PushBrackets();
                            {
                                if (bLayoutStruct)
                                {
                                    AddLine($"unsafe");
                                    PushBrackets();
                                    AddLine($"fixed ({Name}* mPointer = &this)");
                                    PushBrackets();
                                }
                                if (retWrapper)
                                {
                                    AddLine($"return new {typeStr}({GluePrefix}_{fn}_{mDecl.Name}__FieldGet__{i.Name}(mPointer));");
                                }
                                else
                                {
                                    AddLine($"return {GluePrefix}_{fn}_{mDecl.Name}__FieldGet__{i.Name}(mPointer);");
                                }
                                if (bLayoutStruct)
                                {
                                    PopBrackets();
                                    PopBrackets();
                                }
                            }
                            PopBrackets();
                        }
                        AddLine($"set");
                        PushBrackets();
                        {
                            if (bLayoutStruct)
                            {
                                AddLine($"unsafe");
                                PushBrackets();
                                AddLine($"fixed ({Name}* mPointer = &this)");
                                PushBrackets();
                            }
                            AddLine($"{GluePrefix}_{fn}_{mDecl.Name}__FieldSet__{i.Name}(mPointer, value);");
                            if (bLayoutStruct)
                            {
                                PopBrackets();
                                PopBrackets();
                            }
                        }
                        PopBrackets();
                    }
                    PopBrackets();
                }
            }
            AddLine($"#endregion");
        }
        private void WriteField_PInvoke()
        {
            foreach (var i in mDecl.Fields)
            {
                if (GetFullName(i.Type).Contains("(*)") == false && IsIgnoreField(i))
                {
                    continue;
                }

                var fn = Namespace.Replace(".", "_");

                if (GetFullName(i.Type).Contains("(*)"))
                {
                    AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                    AddLine($"extern static void {GluePrefix}_{fn}_{mDecl.Name}__FieldSet__{i.Name}(void* self, System.IntPtr value);");
                }
                else
                {
                    AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                    AddLine($"extern static void {GluePrefix}_{fn}_{mDecl.Name}__FieldSet__{i.Name}(void* self, {GetFullNameCS(i.Type)} value);");

                    AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                    AddLine($"extern static {GetFullNameCS(i.Type)} {GluePrefix}_{fn}_{mDecl.Name}__FieldGet__{i.Name}(void* self);");
                }
            }
        }
        private void GenConstructor(bool bLayoutStruct, ClangSharp.FunctionDecl func1)
        {
            var func = func1 as ClangSharp.CXXConstructorDecl;
            if (mDecl.IsAbstract)
                return;

            if (func.IsCopyConstructor)
                return;

            var ns = FullName.Replace(".", "_");
            if (bLayoutStruct == false)
            {
                AddLine($"public static {Decl.Name} CreateInstance({GetParameterDefine(func)})");
                PushBrackets();
                {
                    AddLine($"return new {Decl.Name}({GluePrefix}_{ns}__CreateInstance_{GetMethodHash(func)}({GetParameterCallee(func)}));");
                }
                PopBrackets();
            }
            else
            {
                AddLine($"public static {Decl.Name}* CreateInstance({GetParameterDefine(func)})");
                PushBrackets();
                {
                    AddLine($"return ({Decl.Name}*){GluePrefix}_{ns}__CreateInstance_{GetMethodHash(func)}({GetParameterCallee(func)});");
                }
                PopBrackets();

                AddLine($"public void UnsafeCallConstructor({GetParameterDefine(func)})");
                PushBrackets();
                {
                    AddLine($"fixed ({Name}* mPointer = &this)");
                    PushBrackets();
                    {
                        if (func1.Parameters.Count > 0)
                            AddLine($"{GluePrefix}_{ns}__Call_Construct_OnMemory__{GetMethodHash(func)}(mPointer, {GetParameterCallee(func)});");
                        else
                            AddLine($"{GluePrefix}_{ns}__Call_Construct_OnMemory__{GetMethodHash(func)}(mPointer);");
                    }
                    PopBrackets();
                }
                PopBrackets();
            }
        }
        private void GenConstructor_PInvoke(ClangSharp.FunctionDecl func1, bool bLayoutStruct)
        {
            var func = func1 as ClangSharp.CXXConstructorDecl;
            if (mDecl.IsAbstract)
                return;

            if (func.IsCopyConstructor)
                return;

            var ns = FullName.Replace(".", "_");
            AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
            AddLine($"extern static void* {GluePrefix}_{ns}__CreateInstance_{GetMethodHash(func)}({GetParameterDefine(func)});");

            if (bLayoutStruct)
            {
                AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                if (func1.Parameters.Count > 0)
                    AddLine($"extern static void {GluePrefix}_{ns}__Call_Construct_OnMemory__{GetMethodHash(func)}(void* self, {GetParameterDefine(func)});");
                else
                    AddLine($"extern static void {GluePrefix}_{ns}__Call_Construct_OnMemory__{GetMethodHash(func)}(void* self);");
            }
        }
        private void GenCast(bool bLayoutStruct)
        {
            if (bLayoutStruct == false)
            {
                AddLine($"public {Name}(void* ptr)");
                PushBrackets();
                {
                    AddLine($"mPointer = ptr;");
                }
                PopBrackets();
            }

            var fn = FullName.Replace(".", "_");

            if (HasMeta(SV_Dispose))
            {
                AddLine($"public void Dispose()");
                PushBrackets();
                {
                    if (bLayoutStruct)
                    {
                        AddLine($"fixed ({Name}* mPointer = &this)");
                        PushBrackets();
                        {
                            AddLine($"{GluePrefix}_{fn}___Dispose(mPointer);");
                        }
                        PopBrackets();
                    }
                    else
                    {
                        AddLine($"{GluePrefix}_{fn}___Dispose(mPointer);");
                    }
                }
                PopBrackets();
            }
            
            foreach (var i in mDecl.Bases)
            {
                var baseDecl = i.Type.AsCXXRecordDecl;
                if (baseDecl == null)
                    continue;

                if (IsValidType(i.Type.Handle) == false)
                    continue;

                var base_fn = GetFullName(i.Type).Replace("::", "_");
                if (bLayoutStruct == false)
                {
                    if (mDecl.Bases.Count == 1)
                    {
                        AddLine($"public {GetFullNameCS(i.Type)} NativeSuper {{ get {{ return CastToSuper(); }} }}");
                        AddLine($"public {GetFullNameCS(i.Type)} CastToSuper()");
                    }
                    else
                    {
                        AddLine($"public {GetFullNameCS(i.Type)} CastToSuper_{baseDecl.Name}()");
                    }
                    PushBrackets();
                    {
                        AddLine($"return new {GetFullNameCS(i.Type)}({GluePrefix}_{fn}__CastSuperClass__{base_fn}(mPointer));");
                    }
                    PopBrackets();
                }
                else
                {
                    if (mDecl.Bases.Count == 1)
                    {
                        AddLine($"public {GetFullNameCS(i.Type)}* NativeSuper {{ get {{ return CastToSuper(); }} }}");
                        AddLine($"public {GetFullNameCS(i.Type)}* CastToSuper()");
                    }
                    else
                    {
                        AddLine($"public {GetFullNameCS(i.Type)}* CastToSuper_{baseDecl.Name}()");
                    }
                    PushBrackets();
                    {
                        AddLine($"fixed ({Name}* mPointer = &this)");
                        PushBrackets();
                        {
                            AddLine($"return ({GetFullNameCS(i.Type)}*){GluePrefix}_{fn}__CastSuperClass__{base_fn}(mPointer);");
                        }
                        PopBrackets();
                    }
                    PopBrackets();
                }
            }
        }
        private void GenCast_PInvoke()
        {
            var fn = FullName.Replace(".", "_");
            foreach (var i in mDecl.Bases)
            {
                var baseDecl = i.Type.AsCXXRecordDecl;
                if (baseDecl == null)
                    continue;

                if (IsValidType(i.Type.Handle) == false)
                    continue;

                var base_fn = GetFullName(i.Type).Replace("::", "_");
                AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                AddLine($"extern static void* {GluePrefix}_{fn}__CastSuperClass__{base_fn}(void* self);");
            }

            if (HasMeta(SV_Dispose))
            {
                AddLine($"[System.Runtime.InteropServices.DllImport(ModuleNC, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]");
                AddLine($"extern static void {GluePrefix}_{fn}___Dispose(void* self);");
            }
        }
        private void DefineStructInherit(ClangSharp.CXXRecordDecl decl, string name)
        {
            AddLine($"[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit, Size = {decl.TypeForDecl.Handle.SizeOf}, Pack = {decl.TypeForDecl.Handle.AlignOf})]");
            AddLine($"public unsafe struct {name}");
            PushBrackets();
            {
                DefineStructInherit_Impl(decl, name);                
            }
            PopBrackets();
        }
        private void DefineStructInherit_Impl(ClangSharp.CXXRecordDecl decl, string name)
        {
            var baseType = GetBaseDecl(decl);
            if (baseType != null)
            {
                //DefineStructInherit(baseType.AsCXXRecordDecl, "SuperLayout");
                //AddLine($"[System.Runtime.InteropServices.FieldOffset(0)]");
                //AddLine($"public SuperLayout Super;");
            }
            foreach (var i in decl.Fields)
            {
                if (i.IsBitField)
                {
                    continue;
                }

                if (i.IsAnonymousField)
                {
                    var tagDecl = i.Type.AsTagDecl as ClangSharp.CXXRecordDecl;
                    if (tagDecl != null)
                    {
                        foreach (var k in tagDecl.Fields)
                        {
                            var offset1 = decl.TypeForDecl.Handle.GetOffsetOf(k.Name);
                            if (offset1 >= 0)
                            {
                                WriteField(decl, k);
                            }
                        }
                    }
                }
                else
                {
                    WriteField(decl, i);
                }
            }
        }
        private void WriteField(ClangSharp.CXXRecordDecl decl, ClangSharp.FieldDecl i)
        {
            var offset = decl.TypeForDecl.Handle.GetOffsetOf(i.Name);
            if (GetFullName(i.Type.Desugar).Contains("(*)"))
            {
                AddLine($"[System.Runtime.InteropServices.FieldOffset({offset / 8})]");
                AddLine($"public System.IntPtr {i.Name};");
                return;
            }

            if (IsValidType(i.Type.Handle) == false)
                return;

            string access = "private";
            switch (i.Access)
            {
                case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXPublic:
                    access = "public";
                    break;
                case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXProtected:
                    access = "protected";
                    break;
                case ClangSharp.Interop.CX_CXXAccessSpecifier.CX_CXXPrivate:
                    access = "private";
                    break;
            }
            access = "public";

            var cxxType = i.Type.AsCXXRecordDecl;
            if (cxxType != null && cxxType.TypeForDecl.IsPointerType == false && GetTypeMapper(GetFullName(cxxType.TypeForDecl)) == null)
            {
                if (CodeWriterManager.Instance.FindClass(GetFullName(cxxType.TypeForDecl)) != null)
                {
                    AddLine($"[System.Runtime.InteropServices.FieldOffset({offset / 8})]");
                    if (HasMeta(cxxType.Attrs, SV_LayoutStruct))
                    {
                        AddLine($"{access} {GetFullNameCS(i.Type)} {i.Name};");
                    }
                    else
                    {
                        AddLine($"{access} {GetFullNameCS(i.Type)}.CppLayout {i.Name};");
                    }
                }
                else
                {
                    DefineStructInherit(cxxType, $"{i.Name}_Layout");
                    AddLine($"[System.Runtime.InteropServices.FieldOffset({offset / 8})]");
                    AddLine($"{access} {i.Name}_Layout {i.Name};");
                }
            }
            else
            {
                AddLine($"[System.Runtime.InteropServices.FieldOffset({offset / 8})]");
                if (i.Type.Handle.NumElements > 0)
                {
                    //AddLine($"{access} fixed {GetFullNameCS(GetNakedType(i.Type.Handle))} {i.Name}[{i.Type.Handle.NumElements}];");
                    AddLine($"private {GetFullNameCS(GetNakedType(i.Type.Handle))} _address_Of_{i.Name};//array size:{i.Type.Handle.NumElements}");
                    AddLine($"{access} {GetFullNameCS(GetNakedType(i.Type.Handle))}* {i.Name}//array size:{i.Type.Handle.NumElements}");
                    PushBrackets();
                    {
                        AddLine($"get");
                        PushBrackets();
                        {
                            AddLine($"fixed ({GetFullNameCS(GetNakedType(i.Type.Handle))}* pThis = &_address_Of_{i.Name}) return pThis;");
                        }
                        PopBrackets();
                    }
                    PopBrackets();
                }
                else
                {
                    AddLine($"{access} {GetFullNameCS(i.Type)} {i.Name};");
                }
            }
        }
        public static string GetFullNameCS(ClangSharp.Type decl)
        {
            return GetFullNameCS(decl.Handle);
        }
        public static bool IsPointer2ReferenceType(ClangSharp.Type type)
        {
            if (type.IsPointerType == false && type.Kind != ClangSharp.Interop.CXTypeKind.CXType_LValueReference)
                return false;

            var decl = type.Handle;
            if (decl.Desugar.ToString().Contains("(*)"))
            {
                return false;
            }
            
            if (decl.kind == ClangSharp.Interop.CXTypeKind.CXType_Typedef)
            {
                //查询typedef映射
                if (mTypeMapper.ContainsKey(decl.ToString()))
                {
                    return true;
                }
            }

            var fn = GetNakedFullNameCS(decl);
            if (fn == "void")
                return false;
            if (mTypeMapper.ContainsKey(fn))
            {//查询POD,POD struct映射
                return true;
            }

            var kls = CodeWriterManager.Instance.FindClass(fn);
            if (kls != null && kls.HasMeta(SV_LayoutStruct))
            {
                return true;
            }
            return false;
        }
        public static string GetNakedFullNameCS(ClangSharp.Interop.CXType decl)
        {
            ClangSharp.Interop.CXType realType = GetNakedType(decl);
            var fn = GetFullName(realType);
            fn = fn.Replace("::", ".");
            fn = fn.Replace("const ", "");
            if (fn.StartsWith("char "))
            {
                fn = fn.Substring("char ".Length);
                fn = "sbyte " + fn;
            }
            fn = fn.Replace(" char", " sbyte");
            return fn;
        }
        public static string GetFullNameCS(ClangSharp.Interop.CXType decl)
        {
            if (decl.kind == ClangSharp.Interop.CXTypeKind.CXType_Typedef)
            {
                //查询typedef映射
                string result1;
                if (mTypeMapper.TryGetValue(decl.ToString(), out result1))
                {
                    return result1;
                }
            }

            var mashal = GetParameterMarshal(GetFullName(decl));
            if (mashal != null)
            {
                mashal = mashal.Replace("::", ".");
                mashal = mashal.Replace("const ", "");
                if (mashal.StartsWith("char "))
                {
                    mashal = mashal.Substring("char ".Length);
                    mashal = "sbyte " + mashal;
                }
                mashal = mashal.Replace(" char", " sbyte");
                if (mashal == "sbyte*")
                    return "string";
                if (mashal == "char*")
                    return "string";
                return mashal;
            }

            int num = 0;
            if (decl.Desugar.ToString().Contains("(*)"))
            {
                var dlgt = CodeWriterManager.Instance.FindDelegate(GetNakedType(decl.Desugar).ToString());
                if (dlgt != null)
                    return dlgt.Name;
                return "IntPtr";
            }
            else
                num = GetPointerNumOfType(decl.Desugar);
            string ptrStr = "";
            for (int i = 0; i < num; i++)
            {
                ptrStr += "*";
            }
            
            var fn = GetNakedFullNameCS(decl);

            string result;
            if (mTypeMapper.TryGetValue(fn, out result))
            {//查询POD,POD struct映射
                result = result + ptrStr;
                return result;
            }
            return fn + ptrStr;
        }
        private bool NeedReferenceFunction(ClangSharp.FunctionDecl decl)
        {
            foreach (var j in decl.Parameters)
            {
                var argType = GetFullNameCS(j.Type);
                if (argType == "sbyte*")
                {
                    continue;
                }
                if (GetPointerNumOfType(j.Type) == 1 && IsPointer2ReferenceType(j.Type))
                {
                    return true;
                }
            }
            return false;
        }
        private string GetParameterDefineRefConverter(ClangSharp.FunctionDecl decl)
        {
            string result = "";
            foreach (var j in decl.Parameters)
            {
                string argName = j.Name;
                var argType = GetFullNameCS(j.Type);
                if (argType == "sbyte*")
                {
                    if (!HasMeta(j.Attrs, SV_NoStringConverter))
                        argType = "string";
                }
                else if (GetPointerNumOfType(j.Type) == 1 && IsPointer2ReferenceType(j.Type))
                {
                    argType = argType.Remove(argType.Length - 1);
                    argType = "ref " + argType;
                    argName = "ref_" + argName;
                }
                if (string.IsNullOrEmpty(result))
                    result += $"{argType} {argName}";
                else
                    result += $", {argType} {argName}";
            }
            return result;
        }
        private string FixedRefConverter(ClangSharp.FunctionDecl decl)
        {
            string result = "";
            foreach (var j in decl.Parameters)
            {
                var argType = GetFullNameCS(j.Type);
                if (argType == "sbyte*")
                {
                    
                }
                else if (GetPointerNumOfType(j.Type) == 1 && IsPointer2ReferenceType(j.Type))
                {
                    AddLine($"fixed ({argType} {j.Name} = &ref_{j.Name})");
                }
            }
            return result;
        }
        private string GetParameterDefine(ClangSharp.FunctionDecl decl)
        {
            string result = "";
            foreach (var j in decl.Parameters)
            {
                var argType = GetFullNameCS(j.Type);
                if (argType == "sbyte*")
                {
                    if (!HasMeta(j.Attrs, SV_NoStringConverter))
                    {
                        argType = "string";
                    }
                }
                
                if (string.IsNullOrEmpty(result))
                    result += $"{argType} {j.Name}";
                else
                    result += $", {argType} {j.Name}";
            }
            return result;
        }
        private string GetParameterCallee(ClangSharp.FunctionDecl decl)
        {
            string result = "";
            foreach (var j in decl.Parameters)
            {
                if (string.IsNullOrEmpty(result))
                    result += $"{j.Name}";
                else
                    result += $", {j.Name}";
            }
            return result;
        }
    }

    public class CSEnumBinderWriter : EnumWriter
    {
        public override void GenCode()
        {
            AddLine($"//This cs is generated by THT.exe");
            NewLine();

            if (!string.IsNullOrEmpty(Namespace))
            {
                AddLine($"namespace {Namespace}");
                PushBrackets();
            }
            if( !HasMeta(SV_EnumNoFlags) )
            {
                AddLine($"[System.Flags]");
            }
            AddLine($"public enum {mDecl.Name}");
            PushBrackets();
            {
                foreach(var i in mDecl.Enumerators)
                {
                    AddLine($"{i.Name} = {i.InitVal},");
                }
            }
            PopBrackets();

            if (!string.IsNullOrEmpty(Namespace))
            {
                PopBrackets();
            }
        }
    }
    public class CSDelegateBinderWriter : DelegateWriter
    {
        public override string Name
        {
            get
            {
                return "DelegateBinder";
            }
        }
        public void GenCode(DelegateWriter dlgt)
        {
            AddLine(dlgt.AsCSharpDelegateString());
        }
    }
}
